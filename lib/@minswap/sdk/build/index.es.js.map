{"version":3,"file":"index.es.js","sources":["../src/types/asset.ts","../src/types/network.ts","../src/types/constants.ts","../src/utils/hash.internal.ts","../src/types/address.internal.ts","../src/utils/address-utils.internal.ts","../src/types/pool.internal.ts","../src/types/pool.ts","../src/adapter.ts","../src/utils/sqrt.internal.ts","../src/calculate.ts","../src/batcher-fee-reduction/configs.internal.ts","../src/types/order.ts","../src/dex.ts"],"sourcesContent":["import { Constr, Data } from \"lucid-cardano\";\n\nexport const ADA: Asset = {\n    policyId: \"\",\n    tokenName: \"\"\n}\n\nexport type Asset = {\n    policyId: string,\n    tokenName: string\n}\n\nexport namespace Asset {\n    export function fromString(s: string): Asset {\n        if (s === \"lovelace\") {\n            return {\n                policyId: \"\",\n                tokenName: \"\"\n            };\n        }\n        const policyId = s.slice(0, 56);\n        const tokenName = s.slice(56);\n        return {\n            policyId: policyId,\n            tokenName: tokenName\n        }\n    }\n\n    export function toString(asset: Asset): string {\n        const { policyId, tokenName } = asset\n        if (policyId === \"\" && tokenName === \"\") {\n            return \"lovelace\"\n        }\n        return policyId + tokenName\n    }\n\n    export function toPlutusData(asset: Asset): Constr<Data> {\n        const { policyId, tokenName } = asset\n        return new Constr(0, [\n            policyId,\n            tokenName\n        ])\n    }\n\n    export function fromPlutusData(data: Constr<Data>): Asset {\n        if (data.index !== 0) {\n            throw new Error(`Index of Asset must be 0, actual: ${data.index}`)\n        }\n        return {\n            policyId: data.fields[0] as string,\n            tokenName: data.fields[1] as string\n        }\n    }\n}","export enum NetworkId {\n  TESTNET = 0,\n  MAINNET,\n}\n","import { Address, OutRef,Script } from \"lucid-cardano\";\n\nimport { NetworkId } from \"./network\";\n\nexport namespace DexV1Constant {\n  export const ORDER_BASE_ADDRESS: Record<number, Address> = {\n    [NetworkId.TESTNET]:\n      \"addr_test1zzn9efv2f6w82hagxqtn62ju4m293tqvw0uhmdl64ch8uwurajt8r8wqtygrfduwgukk73m5gcnplmztc5tl5ngy0upq932hcy\",\n    [NetworkId.MAINNET]:\n      \"addr1zxn9efv2f6w82hagxqtn62ju4m293tqvw0uhmdl64ch8uw6j2c79gy9l76sdg0xwhd7r0c0kna0tycz4y5s6mlenh8pq6s3z70\",\n  };\n\n  export const POOL_SCRIPT_HASH =\n    \"script1uychk9f04tqngfhx4qlqdlug5ntzen3uzc62kzj7cyesjk0d9me\";\n\n  export const FACTORY_POLICY_ID =\n    \"13aa2accf2e1561723aa26871e071fdf32c867cff7e7d50ad470d62f\";\n  export const FACTORY_ASSET_NAME = \"4d494e53574150\";\n  export const LP_POLICY_ID =\n    \"e4214b7cce62ac6fbba385d164df48e157eae5863521b4b67ca71d86\";\n  export const POOL_NFT_POLICY_ID =\n    \"0be55d262b29f564998ff81efe21bdc0022621c12f15af08d0f2ddb1\";\n  export const ORDER_SCRIPT: Script = {\n    type: \"PlutusV1\",\n    script:\n      \"59014f59014c01000032323232323232322223232325333009300e30070021323233533300b3370e9000180480109118011bae30100031225001232533300d3300e22533301300114a02a66601e66ebcc04800400c5288980118070009bac3010300c300c300c300c300c300c300c007149858dd48008b18060009baa300c300b3754601860166ea80184ccccc0288894ccc04000440084c8c94ccc038cd4ccc038c04cc030008488c008dd718098018912800919b8f0014891ce1317b152faac13426e6a83e06ff88a4d62cce3c1634ab0a5ec133090014a0266008444a00226600a446004602600a601a00626600a008601a006601e0026ea8c03cc038dd5180798071baa300f300b300e3754601e00244a0026eb0c03000c92616300a001375400660106ea8c024c020dd5000aab9d5744ae688c8c0088cc0080080048c0088cc00800800555cf2ba15573e6e1d200201\",\n  };\n}\n\nexport namespace StableswapConstant {\n  export type Config = {\n    orderAddress: Address;\n    poolAddress: Address;\n    nftAsset: string;\n    lpAsset: string;\n    assets: string[];\n    multiples: bigint[];\n    fee: bigint;\n    adminFee: bigint;\n    feeDenominator: bigint;\n  }\n\n  export type DeployedScripts = {\n    order: OutRef,\n    pool: OutRef,\n    lp: OutRef,\n    poolBatching: OutRef\n  }\n\n  export const CONFIG: Record<NetworkId, Config[]> = {\n    [NetworkId.TESTNET]: [\n      {\n        orderAddress: \"addr_test1zq8spknltt6yyz2505rhc5lqw89afc4anhu4u0347n5dz8urajt8r8wqtygrfduwgukk73m5gcnplmztc5tl5ngy0upqa63kst\",\n        poolAddress: \"addr_test1zr3hs60rn9x49ahuduuzmnlhnema0jsl4d3ujrf3cmurhmvrajt8r8wqtygrfduwgukk73m5gcnplmztc5tl5ngy0upqcgz9yc\",\n        nftAsset: \"06fe1ba957728130154154d5e5b25a7b533ebe6c4516356c0aa69355646a65642d697573642d76312e342d6c70\",\n        lpAsset: \"d16339238c9e1fb4d034b6a48facb2f97794a9cdb7bc049dd7c49f54646a65642d697573642d76312e342d6c70\",\n        assets: [\n          \"e16c2dc8ae937e8d3790c7fd7168d7b994621ba14ca11415f39fed7274444a4544\",\n          \"e16c2dc8ae937e8d3790c7fd7168d7b994621ba14ca11415f39fed727469555344\"\n        ],\n        multiples: [1n, 1n],\n        fee: 1000000n,\n        adminFee: 5000000000n,\n        feeDenominator: 10000000000n\n      },\n      {\n        orderAddress: \"addr_test1zp3mf7r63u8km2d69kh6v2axlvl04yunmmj67vprljuht4urajt8r8wqtygrfduwgukk73m5gcnplmztc5tl5ngy0upqhelj6n\",\n        poolAddress: \"addr_test1zzc8ar93kgntz3lv95uauhe29kj4yj84mxhg5v9dqj4k7p5rajt8r8wqtygrfduwgukk73m5gcnplmztc5tl5ngy0upqujv25l\",\n        nftAsset: \"06fe1ba957728130154154d5e5b25a7b533ebe6c4516356c0aa69355757364632d757364742d76312e342d6c70\",\n        lpAsset: \"8db03e0cc042a5f82434123a0509f590210996f1c7410c94f913ac48757364632d757364742d76312e342d6c70\",\n        assets: [\n          \"e16c2dc8ae937e8d3790c7fd7168d7b994621ba14ca11415f39fed727455534443\",\n          \"e16c2dc8ae937e8d3790c7fd7168d7b994621ba14ca11415f39fed727455534454\"\n        ],\n        multiples: [1n, 1n],\n        fee: 1000000n,\n        adminFee: 5000000000n,\n        feeDenominator: 10000000000n\n      },\n      {\n        orderAddress: \"addr_test1zqpmw0kkgm6fp9x0asq5vwuaccweeqdv3edhwckqr2gnvzurajt8r8wqtygrfduwgukk73m5gcnplmztc5tl5ngy0upq9z8vxj\",\n        poolAddress: \"addr_test1zqh2uv0wvrtt579e92q35ktkzcj3lj3nzdm3xjpsdack3q5rajt8r8wqtygrfduwgukk73m5gcnplmztc5tl5ngy0upqud27a8\",\n        nftAsset: \"06fe1ba957728130154154d5e5b25a7b533ebe6c4516356c0aa69355646a65642d697573642d6461692d76312e342d6c70\",\n        lpAsset: \"492fd7252d5914c9f5acb7eeb6b905b3a65b9a952c2300de34eb86c5646a65642d697573642d6461692d76312e342d6c70\",\n        assets: [\n          \"e16c2dc8ae937e8d3790c7fd7168d7b994621ba14ca11415f39fed7274444a4544\",\n          \"e16c2dc8ae937e8d3790c7fd7168d7b994621ba14ca11415f39fed727469555344\",\n          \"e16c2dc8ae937e8d3790c7fd7168d7b994621ba14ca11415f39fed7274444149\"\n        ],\n        multiples: [1n, 1n, 1n],\n        fee: 1000000n,\n        adminFee: 5000000000n,\n        feeDenominator: 10000000000n\n      }\n    ],\n    [NetworkId.MAINNET]: [\n      {\n        orderAddress: \"addr1w9xy6edqv9hkptwzewns75ehq53nk8t73je7np5vmj3emps698n9g\",\n        poolAddress: \"addr1wy7kkcpuf39tusnnyga5t2zcul65dwx9yqzg7sep3cjscesx2q5m5\",\n        nftAsset: \"5d4b6afd3344adcf37ccef5558bb87f522874578c32f17160512e398444a45442d695553442d534c50\",\n        lpAsset: \"2c07095028169d7ab4376611abef750623c8f955597a38cd15248640444a45442d695553442d534c50\",\n        assets: [\n          \"8db269c3ec630e06ae29f74bc39edd1f87c819f1056206e879a1cd61446a65644d6963726f555344\",\n          \"f66d78b4a3cb3d37afa0ec36461e51ecbde00f26c8f0a68f94b6988069555344\"\n        ],\n        multiples: [1n, 1n],\n        fee: 1000000n,\n        adminFee: 5000000000n,\n        feeDenominator: 10000000000n,\n      },\n      {\n        orderAddress: \"addr1w93d8cuht3hvqt2qqfjqgyek3gk5d6ss2j93e5sh505m0ng8cmze2\",\n        poolAddress: \"addr1wx8d45xlfrlxd7tctve8xgdtk59j849n00zz2pgyvv47t8sxa6t53\",\n        nftAsset: \"d97fa91daaf63559a253970365fb219dc4364c028e5fe0606cdbfff9555344432d444a45442d534c50\",\n        lpAsset: \"ac49e0969d76ed5aa9e9861a77be65f4fc29e9a979dc4c37a99eb8f4555344432d444a45442d534c50\",\n        assets: [\n          \"25c5de5f5b286073c593edfd77b48abc7a48e5a4f3d4cd9d428ff93555534443\",\n          \"8db269c3ec630e06ae29f74bc39edd1f87c819f1056206e879a1cd61446a65644d6963726f555344\"\n        ],\n        multiples: [1n, 100n],\n        fee: 1000000n,\n        adminFee: 5000000000n,\n        feeDenominator: 10000000000n\n      },\n      {\n        orderAddress: \"addr1wxtv9k2lcum5pmcc4wu44a5tufulszahz84knff87wcawycez9lug\",\n        poolAddress: \"addr1w9520fyp6g3pjwd0ymfy4v2xka54ek6ulv4h8vce54zfyfcm2m0sm\",\n        nftAsset: \"96402c6f5e7a04f16b4d6f500ab039ff5eac5d0226d4f88bf5523ce85553444d2d695553442d534c50\",\n        lpAsset: \"31f92531ac9f1af3079701fab7c66ce997eb07988277ee5b9d6403015553444d2d695553442d534c50\",\n        assets: [\n          \"c48cbb3d5e57ed56e276bc45f99ab39abe94e6cd7ac39fb402da47ad0014df105553444d\",\n          \"f66d78b4a3cb3d37afa0ec36461e51ecbde00f26c8f0a68f94b6988069555344\"\n        ],\n        multiples: [1n, 1n],\n        fee: 1000000n,\n        adminFee: 5000000000n,\n        feeDenominator: 10000000000n\n      },\n      {\n        orderAddress: \"addr1wxr9ppdymqgw6g0hvaaa7wc6j0smwh730ujx6lczgdynehsguav8d\",\n        poolAddress: \"addr1wxxdvtj6y4fut4tmu796qpvy2xujtd836yg69ahat3e6jjcelrf94\",\n        nftAsset: \"07b0869ed7488657e24ac9b27b3f0fb4f76757f444197b2a38a15c3c444a45442d5553444d2d534c50\",\n        lpAsset: \"5b042cf53c0b2ce4f30a9e743b4871ad8c6dcdf1d845133395f55a8e444a45442d5553444d2d534c50\",\n        assets: [\n          \"8db269c3ec630e06ae29f74bc39edd1f87c819f1056206e879a1cd61446a65644d6963726f555344\",\n          \"c48cbb3d5e57ed56e276bc45f99ab39abe94e6cd7ac39fb402da47ad0014df105553444d\"\n        ],\n        multiples: [1n, 1n],\n        fee: 1000000n,\n        adminFee: 5000000000n,\n        feeDenominator: 10000000000n\n      }\n    ]\n  }\n\n  export const DEPLOYED_SCRIPTS: Record<NetworkId, Record<string, DeployedScripts>> = {\n    [NetworkId.TESTNET]: {\n      \"06fe1ba957728130154154d5e5b25a7b533ebe6c4516356c0aa69355646a65642d697573642d76312e342d6c70\": {\n        order: {\n          \"txHash\": \"527e421bc3eb8b9e5ec0a9ad214bb9b76148f57b9a5a8cbd83a51264f943e91d\",\n          \"outputIndex\": 0,\n        },\n        pool: {\n          \"txHash\": \"527e421bc3eb8b9e5ec0a9ad214bb9b76148f57b9a5a8cbd83a51264f943e91d\",\n          \"outputIndex\": 1,\n        },\n        lp: {\n          \"txHash\": \"527e421bc3eb8b9e5ec0a9ad214bb9b76148f57b9a5a8cbd83a51264f943e91d\",\n          \"outputIndex\": 2,\n        },\n        poolBatching: {\n          \"txHash\": \"527e421bc3eb8b9e5ec0a9ad214bb9b76148f57b9a5a8cbd83a51264f943e91d\",\n          \"outputIndex\": 3,\n        }\n      },\n      \"06fe1ba957728130154154d5e5b25a7b533ebe6c4516356c0aa69355757364632d757364742d76312e342d6c70\": {\n        order: {\n          \"txHash\": \"cf699550642c8ffc1673d1e5d56d8562ca7c7f5c0b513a8428c3f52cdcc8fdb7\",\n          \"outputIndex\": 0,\n        },\n        pool: {\n          \"txHash\": \"cf699550642c8ffc1673d1e5d56d8562ca7c7f5c0b513a8428c3f52cdcc8fdb7\",\n          \"outputIndex\": 1,\n        },\n        lp: {\n          \"txHash\": \"cf699550642c8ffc1673d1e5d56d8562ca7c7f5c0b513a8428c3f52cdcc8fdb7\",\n          \"outputIndex\": 2,\n        },\n        poolBatching: {\n          \"txHash\": \"cf699550642c8ffc1673d1e5d56d8562ca7c7f5c0b513a8428c3f52cdcc8fdb7\",\n          \"outputIndex\": 3,\n        }\n      },\n      \"06fe1ba957728130154154d5e5b25a7b533ebe6c4516356c0aa69355646a65642d697573642d6461692d76312e342d6c70\": {\n        order: {\n          \"txHash\": \"a8ab602259654697c85e2f61752d34cdb631f314eaeded0676fee6f6be70afe7\",\n          \"outputIndex\": 0,\n        },\n        pool: {\n          \"txHash\": \"a8ab602259654697c85e2f61752d34cdb631f314eaeded0676fee6f6be70afe7\",\n          \"outputIndex\": 1,\n        },\n        lp: {\n          \"txHash\": \"a8ab602259654697c85e2f61752d34cdb631f314eaeded0676fee6f6be70afe7\",\n          \"outputIndex\": 2,\n        },\n        poolBatching: {\n          \"txHash\": \"a8ab602259654697c85e2f61752d34cdb631f314eaeded0676fee6f6be70afe7\",\n          \"outputIndex\": 3,\n        }\n      }\n    },\n    [NetworkId.MAINNET]: {\n      \"5d4b6afd3344adcf37ccef5558bb87f522874578c32f17160512e398444a45442d695553442d534c50\": {\n        order: {\n          \"txHash\": \"20227174ec2f7853a71a02c435d063b3bf63851d4e0ad9a0c09250a087a6577e\",\n          \"outputIndex\": 0,\n        },\n        pool: {\n          \"txHash\": \"20227174ec2f7853a71a02c435d063b3bf63851d4e0ad9a0c09250a087a6577e\",\n          \"outputIndex\": 1,\n        },\n        lp: {\n          \"txHash\": \"20227174ec2f7853a71a02c435d063b3bf63851d4e0ad9a0c09250a087a6577e\",\n          \"outputIndex\": 2,\n        },\n        poolBatching: {\n          \"txHash\": \"20227174ec2f7853a71a02c435d063b3bf63851d4e0ad9a0c09250a087a6577e\",\n          \"outputIndex\": 3,\n        }\n      },\n      \"d97fa91daaf63559a253970365fb219dc4364c028e5fe0606cdbfff9555344432d444a45442d534c50\": {\n        order: {\n          \"txHash\": \"8b880e77a726e76e5dd585cda2c4c2ac93f1cfccc06910f00550fb820ae1fc54\",\n          \"outputIndex\": 0,\n        },\n        pool: {\n          \"txHash\": \"8b880e77a726e76e5dd585cda2c4c2ac93f1cfccc06910f00550fb820ae1fc54\",\n          \"outputIndex\": 1,\n        },\n        lp: {\n          \"txHash\": \"8b880e77a726e76e5dd585cda2c4c2ac93f1cfccc06910f00550fb820ae1fc54\",\n          \"outputIndex\": 2,\n        },\n        poolBatching: {\n          \"txHash\": \"8b880e77a726e76e5dd585cda2c4c2ac93f1cfccc06910f00550fb820ae1fc54\",\n          \"outputIndex\": 3,\n        }\n      },\n      \"96402c6f5e7a04f16b4d6f500ab039ff5eac5d0226d4f88bf5523ce85553444d2d695553442d534c50\": {\n        order: {\n          \"txHash\": \"48019a931af442e1eedab6c5b52b3069cf6eadb2483a2131f517e62fddfd5662\",\n          \"outputIndex\": 0,\n        },\n        pool: {\n          \"txHash\": \"48019a931af442e1eedab6c5b52b3069cf6eadb2483a2131f517e62fddfd5662\",\n          \"outputIndex\": 1,\n        },\n        lp: {\n          \"txHash\": \"48019a931af442e1eedab6c5b52b3069cf6eadb2483a2131f517e62fddfd5662\",\n          \"outputIndex\": 2,\n        },\n        poolBatching: {\n          \"txHash\": \"48019a931af442e1eedab6c5b52b3069cf6eadb2483a2131f517e62fddfd5662\",\n          \"outputIndex\": 3,\n        }\n      },\n      \"07b0869ed7488657e24ac9b27b3f0fb4f76757f444197b2a38a15c3c444a45442d5553444d2d534c50\": {\n        order: {\n          \"txHash\": \"dddccee9cd58cbf712f2ff2c49ea20537db681a333c701106aa13cd57aee3873\",\n          \"outputIndex\": 0,\n        },\n        pool: {\n          \"txHash\": \"dddccee9cd58cbf712f2ff2c49ea20537db681a333c701106aa13cd57aee3873\",\n          \"outputIndex\": 1,\n        },\n        lp: {\n          \"txHash\": \"dddccee9cd58cbf712f2ff2c49ea20537db681a333c701106aa13cd57aee3873\",\n          \"outputIndex\": 2,\n        },\n        poolBatching: {\n          \"txHash\": \"dddccee9cd58cbf712f2ff2c49ea20537db681a333c701106aa13cd57aee3873\",\n          \"outputIndex\": 3,\n        }\n      }\n    },\n  }\n}\n\nexport namespace DexV2Constant {\n  export type Config = {\n    factoryAsset: string;\n    poolAuthenAsset: string;\n    globalSettingAsset: string;\n    lpPolicyId: string;\n    globalSettingScriptHash: string;\n    orderScriptHash: string;\n    poolScriptHash: string;\n    poolScriptHashBech32: string;\n    poolCreationAddress: Address;\n    factoryScriptHash: string;\n    expiredOrderCancelAddress: string;\n    poolBatchingAddress: string;\n  }\n\n  export type DeployedScripts = {\n    order: OutRef,\n    pool: OutRef,\n    factory: OutRef,\n    authen: OutRef,\n    poolBatching: OutRef,\n    expiredOrderCancellation: OutRef\n  }\n\n  export const CONFIG: Record<NetworkId, Config> = {\n    [NetworkId.TESTNET]: {\n      factoryAsset: \"d6aae2059baee188f74917493cf7637e679cd219bdfbbf4dcbeb1d0b4d5346\",\n      poolAuthenAsset: \"d6aae2059baee188f74917493cf7637e679cd219bdfbbf4dcbeb1d0b4d5350\",\n      globalSettingAsset: \"d6aae2059baee188f74917493cf7637e679cd219bdfbbf4dcbeb1d0b4d534753\",\n      lpPolicyId: \"d6aae2059baee188f74917493cf7637e679cd219bdfbbf4dcbeb1d0b\",\n      globalSettingScriptHash: \"d6aae2059baee188f74917493cf7637e679cd219bdfbbf4dcbeb1d0b\",\n      orderScriptHash: \"da9525463841173ad1230b1d5a1b5d0a3116bbdeb4412327148a1b7a\",\n      poolScriptHash: \"d6ba9b7509eac866288ff5072d2a18205ac56f744bc82dcd808cb8fe\",\n      poolScriptHashBech32: \"script166afkagfatyxv2y075rj62scypdv2mm5f0yzmnvq3ju0uqqmszv\",\n      poolCreationAddress: \"addr_test1zrtt4xm4p84vse3g3l6swtf2rqs943t0w39ustwdszxt3l5rajt8r8wqtygrfduwgukk73m5gcnplmztc5tl5ngy0upqhns793\",\n      factoryScriptHash: \"6e23fe172b5b50e2ad59aded9ee8d488f74c7f4686f91b032220adad\",\n      expiredOrderCancelAddress: \"stake_test17rytpnrpxax5p8leepgjx9cq8ecedgly6jz4xwvvv4kvzfqz6sgpf\",\n      poolBatchingAddress: \"stake_test17rann6nth9675m0y5tz32u3rfhzcfjymanxqnfyexsufu5glcajhf\",\n    },\n    [NetworkId.MAINNET]: {\n      factoryAsset: \"f5808c2c990d86da54bfc97d89cee6efa20cd8461616359478d96b4c4d5346\",\n      poolAuthenAsset: \"f5808c2c990d86da54bfc97d89cee6efa20cd8461616359478d96b4c4d5350\",\n      globalSettingAsset: \"f5808c2c990d86da54bfc97d89cee6efa20cd8461616359478d96b4c4d534753\",\n      lpPolicyId: \"f5808c2c990d86da54bfc97d89cee6efa20cd8461616359478d96b4c\",\n      globalSettingScriptHash: \"f5808c2c990d86da54bfc97d89cee6efa20cd8461616359478d96b4c\",\n      orderScriptHash: \"c3e28c36c3447315ba5a56f33da6a6ddc1770a876a8d9f0cb3a97c4c\",\n      poolScriptHash: \"ea07b733d932129c378af627436e7cbc2ef0bf96e0036bb51b3bde6b\",\n      poolScriptHashBech32: \"script1agrmwv7exgffcdu27cn5xmnuhsh0p0ukuqpkhdgm800xksw7e2w\",\n      poolCreationAddress: \"addr1z84q0denmyep98ph3tmzwsmw0j7zau9ljmsqx6a4rvaau66j2c79gy9l76sdg0xwhd7r0c0kna0tycz4y5s6mlenh8pq777e2a\",\n      factoryScriptHash: \"7bc5fbd41a95f561be84369631e0e35895efb0b73e0a7480bb9ed730\",\n      expiredOrderCancelAddress: \"stake178ytpnrpxax5p8leepgjx9cq8ecedgly6jz4xwvvv4kvzfq9s6295\",\n      poolBatchingAddress: \"stake17y02a946720zw6pw50upt2arvxsvvpvaghjtl054h0f0gjsfyjz59\",\n    }\n  }\n\n  export const DEPLOYED_SCRIPTS: Record<NetworkId, DeployedScripts> = {\n    [NetworkId.TESTNET]: {\n      order: {\n        txHash: \"8c98f0530cba144d264fbd2731488af25257d7ce6a0cd1586fc7209363724f03\",\n        outputIndex: 0\n      },\n      pool: {\n        txHash: \"9f30b1c3948a009ceebda32d0b1d25699674b2eaf8b91ef029a43bfc1073ce28\",\n        outputIndex: 0\n      },\n      factory: {\n        txHash: \"9741d59656e9ad54f197b0763482eede9a6fa1616c4547797eee6617f92a1396\",\n        outputIndex: 0\n      },\n      authen: {\n        txHash: \"c429b8ee27e5761ba8714e26e3a5899886cd28d136d43e969d4bc1acf0f72d4a\",\n        outputIndex: 0\n      },\n      poolBatching: {\n        txHash: \"b0a6c5512735c7a183a167eed035ac75c191d6ff5be9736dfa1f1f02f7ae5dbc\",\n        outputIndex: 0,\n      },\n      expiredOrderCancellation: {\n        txHash: \"ee718dd86e3cb89e802aa8b2be252fccf6f15263f4a26b5f478c5135c40264c6\",\n        outputIndex: 0\n      }\n    },\n    [NetworkId.MAINNET]: {\n      order: {\n        txHash: \"cf4ecddde0d81f9ce8fcc881a85eb1f8ccdaf6807f03fea4cd02da896a621776\",\n        outputIndex: 0\n      },\n      pool: {\n        txHash: \"2536194d2a976370a932174c10975493ab58fd7c16395d50e62b7c0e1949baea\",\n        outputIndex: 0\n      },\n      factory: {\n        txHash: \"59c7fa5c30cbab4e6d38f65e15d1adef71495321365588506ad089d237b602e0\",\n        outputIndex: 0\n      },\n      authen: {\n        txHash: \"dbc1498500a6e79baa0f34d10de55cdb4289ca6c722bd70e1e1b78a858f136b9\",\n        outputIndex: 0\n      },\n      poolBatching: {\n        txHash: \"d46bd227bd2cf93dedd22ae9b6d92d30140cf0d68b756f6608e38d680c61ad17\",\n        outputIndex: 0,\n      },\n      expiredOrderCancellation: {\n        txHash: \"ef3acc7dfc5a98bffe8f4d4400e65a9ade5a1316b2fcb7145c3b83dba38a66f5\",\n        outputIndex: 0\n      }\n    }\n  }\n}\n\n\nexport const BATCHER_FEE_REDUCTION_SUPPORTED_ASSET: Record<\n  number,\n  [string, string]\n> = {\n  [NetworkId.MAINNET]: [\n    \"29d222ce763455e3d7a09a665ce554f00ac89d2e99a1a83d267170c64d494e\", // MIN\n    \"e4214b7cce62ac6fbba385d164df48e157eae5863521b4b67ca71d866aa2153e1ae896a95539c9d62f76cedcdabdcdf144e564b8955f609d660cf6a2\", // ADA-MIN LP\n  ],\n  [NetworkId.TESTNET]: [\n    \"e16c2dc8ae937e8d3790c7fd7168d7b994621ba14ca11415f39fed724d494e\", // MIN\n    \"e4214b7cce62ac6fbba385d164df48e157eae5863521b4b67ca71d863bb0079303c57812462dec9de8fb867cef8fd3768de7f12c77f6f0dd80381d0d\", // ADA-MIN LP\n  ],\n};\n\nexport enum MetadataMessage {\n  DEPOSIT_ORDER = \"SDK Minswap: Deposit Order\",\n  CANCEL_ORDER = \"SDK Minswap: Cancel Order\",\n  ZAP_IN_ORDER = \"SDK Minswap: Zap Order\",\n  SWAP_EXACT_IN_ORDER = \"SDK Minswap: Swap Exact In Order\",\n  SWAP_EXACT_IN_LIMIT_ORDER = \"SDK Minswap: Swap Exact In Limit Order\",\n  SWAP_EXACT_OUT_ORDER = \"SDK Minswap: Swap Exact Out Order\",\n  WITHDRAW_ORDER = \"SDK Minswap: Withdraw Order\",\n}\n\nexport const FIXED_DEPOSIT_ADA = 2_000_000n;\n","import { SHA3 } from \"sha3\";\n\nexport function sha3(hex: string): string {\n    const hash = new SHA3(256);\n    hash.update(hex, \"hex\");\n    return hash.digest(\"hex\");\n}","import invariant from \"@minswap/tiny-invariant\";\nimport {\n  Address,\n  C,\n  Constr,\n  Credential,\n  Data,\n  getAddressDetails,\n} from \"lucid-cardano\";\n\nimport { NetworkId } from \"./network\";\n\nexport namespace LucidCredential {\n  export function toPlutusData(data: Credential): Constr<Data> {\n    const constructor = data.type === \"Key\" ? 0 : 1;\n    return new Constr(constructor, [data.hash]);\n  }\n\n  export function fromPlutusData(data: Constr<Data>): Credential {\n    switch (data.index) {\n      case 0: {\n        return {\n          type: \"Key\",\n          hash: data.fields[0] as string,\n        };\n      }\n      case 1: {\n        return {\n          type: \"Script\",\n          hash: data.fields[0] as string,\n        };\n      }\n      default: {\n        throw new Error(\n          `Index of Credentail must be 0 or 1, actual: ${data.index}`\n        );\n      }\n    }\n  }\n\n  export function toCSLStakeCredential(\n    credential: Credential\n  ): C.StakeCredential {\n    switch (credential.type) {\n      case \"Key\": {\n        return C.StakeCredential.from_keyhash(\n          C.Ed25519KeyHash.from_hex(credential.hash)\n        );\n      }\n      case \"Script\": {\n        return C.StakeCredential.from_scripthash(\n          C.ScriptHash.from_hex(credential.hash)\n        );\n      }\n    }\n  }\n}\n\nexport namespace AddressPlutusData {\n  export function toPlutusData(address: Address): Constr<Data> {\n    const addressDetails = getAddressDetails(address);\n    if (addressDetails.type === \"Base\") {\n      invariant(\n        addressDetails.paymentCredential && addressDetails.stakeCredential,\n        \"baseAddress must have both paymentCredential and stakeCredential\"\n      );\n\n      return new Constr(0, [\n        LucidCredential.toPlutusData(addressDetails.paymentCredential),\n        new Constr(0, [\n          new Constr(0, [\n            LucidCredential.toPlutusData(addressDetails.stakeCredential),\n          ]),\n        ]),\n      ]);\n    }\n    if (addressDetails.type === \"Enterprise\") {\n      invariant(\n        addressDetails.paymentCredential,\n        \"EnterpriseAddress must has paymentCredential\"\n      );\n      return new Constr(0, [\n        LucidCredential.toPlutusData(addressDetails.paymentCredential),\n        new Constr(1, []),\n      ]);\n    }\n    throw new Error(\"only supports base address, enterprise address\");\n  }\n\n  export function fromPlutusData(\n    networkId: NetworkId,\n    data: Constr<Data>\n  ): Address {\n    switch (data.index) {\n      case 0: {\n        const paymentCredential = LucidCredential.fromPlutusData(\n          data.fields[0] as Constr<Data>\n        );\n        const cslPaymentCredential =\n          LucidCredential.toCSLStakeCredential(paymentCredential);\n        const maybeStakeCredentialConstr = data.fields[1] as Constr<Data>;\n        switch (maybeStakeCredentialConstr.index) {\n          case 0: {\n            // Base Address or Pointer Address\n            const stakeCredentialConstr = maybeStakeCredentialConstr\n              .fields[0] as Constr<Data>;\n            switch (stakeCredentialConstr.index) {\n              case 0: {\n                const stakeCredential = LucidCredential.fromPlutusData(\n                  stakeCredentialConstr.fields[0] as Constr<Data>\n                );\n                const cslStakeCredential =\n                  LucidCredential.toCSLStakeCredential(stakeCredential);\n                const cslAddress = C.BaseAddress.new(\n                  networkId,\n                  cslPaymentCredential,\n                  cslStakeCredential\n                ).to_address();\n                return cslAddress.to_bech32(undefined);\n              }\n              case 1: {\n                throw new Error(`Pointer Address has not been supported yet`);\n              }\n              default: {\n                throw new Error(\n                  `Index of StakeCredentail must be 0 or 1, actual: ${stakeCredentialConstr.index}`\n                );\n              }\n            }\n          }\n          case 1: {\n            // Enterprise Address\n            const cslAddress = C.EnterpriseAddress.new(\n              networkId,\n              cslPaymentCredential\n            ).to_address();\n            return cslAddress.to_bech32(undefined);\n          }\n          default: {\n            throw new Error(\n              `Index of Maybe Stake Credentail must be 0 or 1, actual: ${maybeStakeCredentialConstr.index}`\n            );\n          }\n        }\n      }\n      default: {\n        throw new Error(`Index of Address must be 0, actual: ${data.index}`);\n      }\n    }\n  }\n}\n","import { C } from \"lucid-cardano\";\n\nexport function getScriptHashFromAddress(addr: string): string | null {\n  const cslAddr = C.Address.from_bech32(addr);\n  const specificAddr =\n    C.BaseAddress.from_address(cslAddr) ||\n    C.EnterpriseAddress.from_address(cslAddr) ||\n    C.PointerAddress.from_address(cslAddr) ||\n    C.RewardAddress.from_address(cslAddr);\n  if (!specificAddr) {\n    return null;\n  }\n  return (\n    specificAddr.payment_cred().to_scripthash()?.to_bech32(\"script\") ?? null\n  );\n}\n","import invariant from \"@minswap/tiny-invariant\";\nimport { Address, Constr, Data } from \"lucid-cardano\";\n\nimport { getScriptHashFromAddress } from \"../utils/address-utils.internal\";\nimport { AddressPlutusData } from \"./address.internal\";\nimport { DexV1Constant } from \"./constants\";\nimport { NetworkId } from \"./network\";\nimport { Value } from \"./tx.internal\";\n\n// ADA goes first\n// If non-ADA, then sort lexicographically\nexport function normalizeAssets(a: string, b: string): [string, string] {\n  if (a === \"lovelace\") {\n    return [a, b];\n  }\n  if (b === \"lovelace\") {\n    return [b, a];\n  }\n  if (a < b) {\n    return [a, b];\n  } else {\n    return [b, a];\n  }\n}\n\nexport type PoolFeeSharing = {\n  feeTo: Address;\n  feeToDatumHash?: string;\n};\n\nexport namespace PoolFeeSharing {\n  export function toPlutusData(feeSharing: PoolFeeSharing): Constr<Data> {\n    const { feeTo, feeToDatumHash } = feeSharing;\n    return new Constr(0, [\n      AddressPlutusData.toPlutusData(feeTo),\n      feeToDatumHash ? new Constr(0, [feeToDatumHash]) : new Constr(1, []),\n    ]);\n  }\n\n  export function fromPlutusData(\n    networkId: NetworkId,\n    data: Constr<Data>\n  ): PoolFeeSharing {\n    if (data.index !== 0) {\n      throw new Error(\n        `Index of Pool Profit Sharing must be 0, actual: ${data.index}`\n      );\n    }\n    let feeToDatumHash: string | undefined = undefined;\n    const maybeFeeToDatumHash = data.fields[1] as Constr<Data>;\n    switch (maybeFeeToDatumHash.index) {\n      case 0: {\n        feeToDatumHash = maybeFeeToDatumHash.fields[0] as string;\n        break;\n      }\n      case 1: {\n        feeToDatumHash = undefined;\n        break;\n      }\n      default: {\n        throw new Error(\n          `Index of Fee To DatumHash must be 0 or 1, actual: ${maybeFeeToDatumHash.index}`\n        );\n      }\n    }\n    return {\n      feeTo: AddressPlutusData.fromPlutusData(\n        networkId,\n        data.fields[0] as Constr<Data>\n      ),\n      feeToDatumHash: feeToDatumHash,\n    };\n  }\n}\n\nexport function checkValidPoolOutput(\n  poolAddress: string,\n  value: Value,\n  datumHash: string | null\n): void {\n  invariant(\n    getScriptHashFromAddress(poolAddress) === DexV1Constant.POOL_SCRIPT_HASH,\n    `invalid pool address: ${poolAddress}`\n  );\n  // must have 1 factory token\n  if (\n    value.find(\n      ({ unit }) => unit === `${DexV1Constant.FACTORY_POLICY_ID}${DexV1Constant.FACTORY_ASSET_NAME}`\n    )?.quantity !== \"1\"\n  ) {\n    throw new Error(`expect pool to have 1 factory token`);\n  }\n  invariant(datumHash, `expect pool to have datum hash, got ${datumHash}`);\n}\n\nexport function isValidPoolOutput(\n  poolAddress: string,\n  value: Value,\n  datumHash: string | null\n): boolean {\n  try {\n    checkValidPoolOutput(poolAddress, value, datumHash);\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n","import invariant from \"@minswap/tiny-invariant\";\nimport { Constr, Credential, Data } from \"lucid-cardano\";\n\nimport { sha3 } from \"../utils/hash.internal\";\nimport { LucidCredential } from \"./address.internal\";\nimport { Asset } from \"./asset\";\nimport {\n  DexV1Constant,\n  DexV2Constant,\n  StableswapConstant,\n} from \"./constants\";\nimport { NetworkId } from \"./network\";\nimport { normalizeAssets, PoolFeeSharing } from \"./pool.internal\";\nimport { TxIn, Value } from \"./tx.internal\";\n\nexport const DEFAULT_POOL_V2_TRADING_FEE_DENOMINATOR = 10000n;\n\nexport namespace PoolV1 {\n  /**\n   * Represents state of a pool UTxO. The state could be latest state or a historical state.\n   */\n  export class State {\n    /** The transaction hash and output index of the pool UTxO */\n    public readonly address: string;\n    public readonly txIn: TxIn;\n    public readonly value: Value;\n    public readonly datumHash: string;\n    public readonly assetA: string;\n    public readonly assetB: string;\n\n    constructor(address: string, txIn: TxIn, value: Value, datumHash: string) {\n      this.address = address;\n      this.txIn = txIn;\n      this.value = value;\n      this.datumHash = datumHash;\n\n      const nft = value.find(({ unit }) => unit.startsWith(DexV1Constant.POOL_NFT_POLICY_ID));\n      invariant(nft, \"pool doesn't have NFT\");\n      const poolId = nft.unit.slice(56);\n      // validate and memoize assetA and assetB\n      const relevantAssets = value.filter(\n        ({ unit }) =>\n          !unit.startsWith(DexV1Constant.FACTORY_POLICY_ID) && // factory token\n          !unit.endsWith(poolId) // NFT and LP tokens from profit sharing\n      );\n      switch (relevantAssets.length) {\n        case 2: {\n          // ADA/A pool\n          this.assetA = \"lovelace\";\n          const nonADAAssets = relevantAssets.filter(\n            ({ unit }) => unit !== \"lovelace\"\n          );\n          invariant(nonADAAssets.length === 1, \"pool must have 1 non-ADA asset\");\n          this.assetB = nonADAAssets[0].unit;\n          break;\n        }\n        case 3: {\n          // A/B pool\n          const nonADAAssets = relevantAssets.filter(\n            ({ unit }) => unit !== \"lovelace\"\n          );\n          invariant(nonADAAssets.length === 2, \"pool must have 1 non-ADA asset\");\n          [this.assetA, this.assetB] = normalizeAssets(\n            nonADAAssets[0].unit,\n            nonADAAssets[1].unit\n          );\n          break;\n        }\n        default:\n          throw new Error(\n            \"pool must have 2 or 3 assets except factory, NFT and LP tokens\"\n          );\n      }\n    }\n\n    get nft(): string {\n      const nft = this.value.find(({ unit }) =>\n        unit.startsWith(DexV1Constant.POOL_NFT_POLICY_ID)\n      );\n      invariant(nft, \"pool doesn't have NFT\");\n      return nft.unit;\n    }\n\n    get id(): string {\n      // a pool's ID is the NFT's asset name\n      return this.nft.slice(DexV1Constant.POOL_NFT_POLICY_ID.length);\n    }\n\n    get assetLP(): string {\n      return `${DexV1Constant.LP_POLICY_ID}${this.id}`;\n    }\n\n    get reserveA(): bigint {\n      return BigInt(\n        this.value.find(({ unit }) => unit === this.assetA)?.quantity ?? \"0\"\n      );\n    }\n\n    get reserveB(): bigint {\n      return BigInt(\n        this.value.find(({ unit }) => unit === this.assetB)?.quantity ?? \"0\"\n      );\n    }\n  }\n\n  export type Datum = {\n    assetA: Asset;\n    assetB: Asset;\n    totalLiquidity: bigint;\n    rootKLast: bigint;\n    feeSharing?: PoolFeeSharing;\n  };\n\n  export namespace Datum {\n    export function toPlutusData(datum: Datum): Constr<Data> {\n      const { assetA, assetB, totalLiquidity, rootKLast, feeSharing } = datum;\n      return new Constr(0, [\n        Asset.toPlutusData(assetA),\n        Asset.toPlutusData(assetB),\n        totalLiquidity,\n        rootKLast,\n        feeSharing\n          ? new Constr(0, [PoolFeeSharing.toPlutusData(feeSharing)])\n          : new Constr(1, []),\n      ]);\n    }\n\n    export function fromPlutusData(\n      networkId: NetworkId,\n      data: Constr<Data>\n    ): Datum {\n      if (data.index !== 0) {\n        throw new Error(`Index of Pool Datum must be 0, actual: ${data.index}`);\n      }\n      let feeSharing: PoolFeeSharing | undefined = undefined;\n      const maybeFeeSharingConstr = data.fields[4] as Constr<Data>;\n      switch (maybeFeeSharingConstr.index) {\n        case 0: {\n          feeSharing = PoolFeeSharing.fromPlutusData(\n            networkId,\n            maybeFeeSharingConstr.fields[0] as Constr<Data>\n          );\n          break;\n        }\n        case 1: {\n          feeSharing = undefined;\n          break;\n        }\n        default: {\n          throw new Error(\n            `Index of Pool Fee Sharing must be 0 or 1, actual: ${maybeFeeSharingConstr.index}`\n          );\n        }\n      }\n      return {\n        assetA: Asset.fromPlutusData(data.fields[0] as Constr<Data>),\n        assetB: Asset.fromPlutusData(data.fields[1] as Constr<Data>),\n        totalLiquidity: data.fields[2] as bigint,\n        rootKLast: data.fields[3] as bigint,\n        feeSharing: feeSharing,\n      };\n    }\n  }\n}\n\nexport namespace StablePool {\n  export class State {\n    public readonly address: string;\n    public readonly txIn: TxIn;\n    public readonly value: Value;\n    public readonly datumCbor: string;\n    public readonly datum: Datum;\n    public readonly config: StableswapConstant.Config\n\n    constructor(\n      networkId: NetworkId,\n      address: string,\n      txIn: TxIn,\n      value: Value,\n      datum: string\n    ) {\n      this.address = address\n      this.txIn = txIn\n      this.value = value\n      this.datumCbor = datum\n      this.datum = Datum.fromPlutusData(Data.from(datum))\n      const allConfigs = StableswapConstant.CONFIG[networkId]\n      const config = allConfigs.find((cfg) => cfg.poolAddress === address)\n      if (!config) {\n        throw new Error(\"Invalid Stable Pool address\")\n      }\n      this.config = config\n      if (!value.find((v) => v.unit === config.nftAsset && v.quantity === \"1\")) {\n        throw new Error(\"Cannot find the Pool NFT in the value\")\n      }\n    }\n\n    get assets(): string[] {\n      return this.config.assets\n    }\n\n    get nft(): string {\n      return this.config.nftAsset\n    }\n\n    get lpAsset(): string {\n      return this.config.lpAsset\n    }\n\n    get reserves(): bigint[] {\n      return this.datum.balances\n    }\n\n    get totalLiquidity(): bigint {\n      return this.datum.totalLiquidity\n    }\n\n    get orderHash(): string {\n      return this.datum.orderHash\n    }\n\n    get amp(): bigint {\n      return this.datum.amplificationCoefficient\n    }\n\n    get id(): string {\n      return this.nft\n    }\n  }\n\n  export type Datum = {\n    balances: bigint[];\n    totalLiquidity: bigint;\n    amplificationCoefficient: bigint;\n    orderHash: string;\n  }\n\n  export namespace Datum {\n    export function toPlutusData(datum: Datum): Constr<Data> {\n      const { balances, totalLiquidity, amplificationCoefficient, orderHash } = datum;\n      return new Constr(0, [\n        balances,\n        totalLiquidity,\n        amplificationCoefficient,\n        orderHash\n      ]);\n    }\n\n    export function fromPlutusData(data: Constr<Data>): Datum {\n      if (data.index !== 0) {\n        throw new Error(`Index of Pool Datum must be 0, actual: ${data.index}`);\n      }\n      return {\n        balances: data.fields[0] as bigint[],\n        totalLiquidity: data.fields[1] as bigint,\n        amplificationCoefficient: data.fields[2] as bigint,\n        orderHash: data.fields[3] as string\n      }\n    }\n  }\n}\n\nexport namespace PoolV2 {\n  export function computeLPAssetName(assetA: Asset, assetB: Asset): string {\n    const k1 = sha3(assetA.policyId + assetA.tokenName);\n    const k2 = sha3(assetB.policyId + assetB.tokenName);\n    return sha3(k1 + k2);\n  }\n  export class State {\n    public readonly address: string;\n    public readonly txIn: TxIn;\n    public readonly value: Value;\n    public readonly datumRaw: string;\n    public readonly datum: Datum;\n    public readonly config: DexV2Constant.Config\n    public readonly lpAsset: Asset;\n    public readonly authenAsset: Asset;\n    constructor(\n      networkId: NetworkId,\n      address: string,\n      txIn: TxIn,\n      value: Value,\n      datum: string\n    ) {\n      this.address = address\n      this.txIn = txIn\n      this.value = value\n      this.datumRaw = datum\n      this.datum = Datum.fromPlutusData(Data.from(datum))\n      this.config = DexV2Constant.CONFIG[networkId]\n      this.lpAsset = {\n        policyId: this.config.lpPolicyId,\n        tokenName: computeLPAssetName(this.datum.assetA, this.datum.assetB)\n      }\n      this.authenAsset = Asset.fromString(this.config.poolAuthenAsset)\n      if (!value.find((v) => v.unit === this.config.poolAuthenAsset && v.quantity === \"1\")) {\n        throw new Error(\"Cannot find the Pool Authentication Asset in the value\")\n      }\n    }\n\n    get assetA(): string {\n      return Asset.toString(this.datum.assetA)\n    }\n\n    get assetB(): string {\n      return Asset.toString(this.datum.assetB)\n    }\n\n    get totalLiquidity(): bigint {\n      return this.datum.totalLiquidity\n    }\n\n    get reserveA(): bigint {\n      return this.datum.reserveA\n    }\n\n    get reserveB(): bigint {\n      return this.datum.reserveB\n    }\n\n    get feeA(): [bigint, bigint] {\n      return [\n        this.datum.baseFee.feeANumerator,\n        DEFAULT_POOL_V2_TRADING_FEE_DENOMINATOR\n      ]\n    }\n\n    get feeB(): [bigint, bigint] {\n      return [\n        this.datum.baseFee.feeBNumerator,\n        DEFAULT_POOL_V2_TRADING_FEE_DENOMINATOR\n      ]\n    }\n\n    get feeShare(): [bigint, bigint] | undefined {\n      if (this.datum.feeSharingNumerator !== undefined) {\n        return [\n          this.datum.feeSharingNumerator,\n          DEFAULT_POOL_V2_TRADING_FEE_DENOMINATOR\n        ]\n      } else {\n        return undefined\n      }\n    }\n  }\n\n  export type Datum = {\n    poolBatchingStakeCredential: Credential;\n    assetA: Asset;\n    assetB: Asset;\n    totalLiquidity: bigint;\n    reserveA: bigint;\n    reserveB: bigint;\n    baseFee: {\n      feeANumerator: bigint;\n      feeBNumerator: bigint;\n    };\n    feeSharingNumerator?: bigint;\n    allowDynamicFee: boolean;\n  }\n\n  export namespace Datum {\n    export function toPlutusData(datum: Datum): Constr<Data> {\n      const {\n        poolBatchingStakeCredential,\n        assetA,\n        assetB,\n        totalLiquidity,\n        reserveA,\n        reserveB,\n        baseFee,\n        feeSharingNumerator,\n        allowDynamicFee\n      } = datum;\n      return new Constr(0, [\n        LucidCredential.toPlutusData(poolBatchingStakeCredential),\n        Asset.toPlutusData(assetA),\n        Asset.toPlutusData(assetB),\n        totalLiquidity,\n        reserveA,\n        reserveB,\n        baseFee.feeANumerator,\n        baseFee.feeBNumerator,\n        feeSharingNumerator !== undefined\n          ? new Constr(0, [feeSharingNumerator])\n          : new Constr(1, []),\n        new Constr(allowDynamicFee ? 1 : 0, [])\n      ]);\n    }\n\n    export function fromPlutusData(data: Constr<Data>): Datum {\n      if (data.index !== 0) {\n        throw new Error(`Index of Pool Datum must be 0, actual: ${data.index}`);\n      }\n      let feeSharingNumerator: bigint | undefined = undefined;\n      const maybeFeeSharingConstr = data.fields[8] as Constr<Data>;\n      switch (maybeFeeSharingConstr.index) {\n        case 0: {\n          feeSharingNumerator = maybeFeeSharingConstr.fields[0] as bigint\n          break;\n        }\n        case 1: {\n          feeSharingNumerator = undefined;\n          break;\n        }\n        default: {\n          throw new Error(\n            `Index of Pool Fee Sharing must be 0 or 1, actual: ${maybeFeeSharingConstr.index}`\n          );\n        }\n      }\n      const allowDynamicFeeConstr = data.fields[9] as Constr<Data>;\n      const allowDynamicFee = allowDynamicFeeConstr.index === 1;\n      return {\n        poolBatchingStakeCredential: LucidCredential.fromPlutusData(data.fields[0] as Constr<Data>),\n        assetA: Asset.fromPlutusData(data.fields[1] as Constr<Data>),\n        assetB: Asset.fromPlutusData(data.fields[2] as Constr<Data>),\n        totalLiquidity: data.fields[3] as bigint,\n        reserveA: data.fields[4] as bigint,\n        reserveB: data.fields[5] as bigint,\n        baseFee: {\n          feeANumerator: data.fields[6] as bigint,\n          feeBNumerator: data.fields[7] as bigint\n        },\n        feeSharingNumerator: feeSharingNumerator,\n        allowDynamicFee: allowDynamicFee\n      };\n    }\n  }\n}\n","import {\n  BlockFrostAPI,\n  BlockfrostServerError,\n} from \"@blockfrost/blockfrost-js\";\nimport { PaginationOptions } from \"@blockfrost/blockfrost-js/lib/types\";\nimport invariant from \"@minswap/tiny-invariant\";\nimport Big from \"big.js\";\n\nimport { Asset } from \"./types/asset\";\nimport {\n  DexV1Constant,\n  DexV2Constant,\n  StableswapConstant,\n} from \"./types/constants\";\nimport { NetworkId } from \"./types/network\";\nimport { PoolV1, PoolV2, StablePool } from \"./types/pool\";\nimport {\n  checkValidPoolOutput,\n  isValidPoolOutput,\n  normalizeAssets,\n} from \"./types/pool.internal\";\nimport { TxHistory } from \"./types/tx.internal\";\nimport { getScriptHashFromAddress } from \"./utils/address-utils.internal\";\n\nexport type BlockfrostAdapterOptions = {\n  networkId: NetworkId;\n  blockFrost: BlockFrostAPI;\n};\n\nexport type GetPoolsParams = Omit<PaginationOptions, \"page\"> & {\n  page: number;\n};\n\nexport type GetPoolByIdParams = {\n  id: string;\n};\n\nexport type GetPoolPriceParams = {\n  pool: PoolV1.State;\n  decimalsA?: number;\n  decimalsB?: number;\n};\n\nexport type GetPoolHistoryParams = PaginationOptions & {\n  id: string;\n};\n\nexport type GetPoolInTxParams = {\n  txHash: string;\n};\n\nexport type GetStablePoolInTxParams = {\n  networkId: NetworkId;\n  txHash: string;\n};\n\nexport class BlockfrostAdapter {\n  private readonly api: BlockFrostAPI;\n  private readonly networkId: NetworkId;\n\n  constructor({ networkId, blockFrost }: BlockfrostAdapterOptions) {\n    this.networkId = networkId;\n    this.api = blockFrost;\n  }\n\n  /**\n   * @returns The latest pools or empty array if current page is after last page\n   */\n  public async getV1Pools({\n    page,\n    count = 100,\n    order = \"asc\",\n  }: GetPoolsParams): Promise<PoolV1.State[]> {\n    const utxos = await this.api.addressesUtxos(\n      DexV1Constant.POOL_SCRIPT_HASH,\n      {\n        count,\n        order,\n        page,\n      }\n    );\n    return utxos\n      .filter((utxo) =>\n        isValidPoolOutput(utxo.address, utxo.amount, utxo.data_hash)\n      )\n      .map((utxo) => {\n        invariant(\n          utxo.data_hash,\n          `expect pool to have datum hash, got ${utxo.data_hash}`\n        );\n        return new PoolV1.State(\n          utxo.address,\n          { txHash: utxo.tx_hash, index: utxo.output_index },\n          utxo.amount,\n          utxo.data_hash\n        );\n      });\n  }\n\n  /**\n   * Get a specific pool by its ID.\n   * @param {Object} params - The parameters.\n   * @param {string} params.pool - The pool ID. This is the asset name of a pool's NFT and LP tokens. It can also be acquired by calling pool.id.\n   * @returns {PoolV1.State | null} - Returns the pool or null if not found.\n   */\n  public async getV1PoolById({\n    id,\n  }: GetPoolByIdParams): Promise<PoolV1.State | null> {\n    const nft = `${DexV1Constant.POOL_NFT_POLICY_ID}${id}`;\n    const nftTxs = await this.api.assetsTransactions(nft, {\n      count: 1,\n      page: 1,\n      order: \"desc\",\n    });\n    if (nftTxs.length === 0) {\n      return null;\n    }\n    return this.getV1PoolInTx({ txHash: nftTxs[0].tx_hash });\n  }\n\n  public async getV1PoolHistory({\n    id,\n    page = 1,\n    count = 100,\n    order = \"desc\",\n  }: GetPoolHistoryParams): Promise<TxHistory[]> {\n    const nft = `${DexV1Constant.POOL_NFT_POLICY_ID}${id}`;\n    const nftTxs = await this.api.assetsTransactions(nft, {\n      count,\n      page,\n      order,\n    });\n    return nftTxs.map(\n      (tx): TxHistory => ({\n        txHash: tx.tx_hash,\n        txIndex: tx.tx_index,\n        blockHeight: tx.block_height,\n        time: new Date(Number(tx.block_time) * 1000),\n      })\n    );\n  }\n\n  /**\n   * Get pool state in a transaction.\n   * @param {Object} params - The parameters.\n   * @param {string} params.txHash - The transaction hash containing pool output. One of the way to acquire is by calling getPoolHistory.\n   * @returns {PoolV1.State} - Returns the pool state or null if the transaction doesn't contain pool.\n   */\n  public async getV1PoolInTx({\n    txHash,\n  }: GetPoolInTxParams): Promise<PoolV1.State | null> {\n    const poolTx = await this.api.txsUtxos(txHash);\n    const poolUtxo = poolTx.outputs.find(\n      (o) =>\n        getScriptHashFromAddress(o.address) === DexV1Constant.POOL_SCRIPT_HASH\n    );\n    if (!poolUtxo) {\n      return null;\n    }\n    checkValidPoolOutput(poolUtxo.address, poolUtxo.amount, poolUtxo.data_hash);\n    invariant(\n      poolUtxo.data_hash,\n      `expect pool to have datum hash, got ${poolUtxo.data_hash}`\n    );\n    return new PoolV1.State(\n      poolUtxo.address,\n      { txHash: txHash, index: poolUtxo.output_index },\n      poolUtxo.amount,\n      poolUtxo.data_hash\n    );\n  }\n\n  public async getAssetDecimals(asset: string): Promise<number> {\n    if (asset === \"lovelace\") {\n      return 6;\n    }\n    try {\n      const assetAInfo = await this.api.assetsById(asset);\n      return assetAInfo.metadata?.decimals ?? 0;\n    } catch (err) {\n      if (err instanceof BlockfrostServerError && err.status_code === 404) {\n        return 0;\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Get pool price.\n   * @param {Object} params - The parameters to calculate pool price.\n   * @param {string} params.pool - The pool we want to get price.\n   * @param {string} [params.decimalsA] - The decimals of assetA in pool, if undefined then query from Blockfrost.\n   * @param {string} [params.decimalsB] - The decimals of assetB in pool, if undefined then query from Blockfrost.\n   * @returns {[string, string]} - Returns a pair of asset A/B price and B/A price, adjusted to decimals.\n   */\n  public async getV1PoolPrice({\n    pool,\n    decimalsA,\n    decimalsB,\n  }: GetPoolPriceParams): Promise<[Big, Big]> {\n    if (decimalsA === undefined) {\n      decimalsA = await this.getAssetDecimals(pool.assetA);\n    }\n    if (decimalsB === undefined) {\n      decimalsB = await this.getAssetDecimals(pool.assetB);\n    }\n    const adjustedReserveA = Big(pool.reserveA.toString()).div(\n      Big(10).pow(decimalsA)\n    );\n    const adjustedReserveB = Big(pool.reserveB.toString()).div(\n      Big(10).pow(decimalsB)\n    );\n    const priceAB = adjustedReserveA.div(adjustedReserveB);\n    const priceBA = adjustedReserveB.div(adjustedReserveA);\n    return [priceAB, priceBA];\n  }\n\n  public async getDatumByDatumHash(datumHash: string): Promise<string> {\n    const scriptsDatum = await this.api.scriptsDatumCbor(datumHash);\n    return scriptsDatum.cbor;\n  }\n\n  public async getAllV2Pools(): Promise<{\n    pools: PoolV2.State[];\n    errors: unknown[];\n  }> {\n    const v2Config = DexV2Constant.CONFIG[this.networkId];\n    const utxos = await this.api.addressesUtxosAssetAll(\n      v2Config.poolScriptHashBech32,\n      v2Config.poolAuthenAsset\n    );\n\n    const pools: PoolV2.State[] = [];\n    const errors: unknown[] = [];\n    for (const utxo of utxos) {\n      try {\n        if (!utxo.inline_datum) {\n          throw new Error(`Cannot find datum of Pool V2, tx: ${utxo.tx_hash}`);\n        }\n        const pool = new PoolV2.State(\n          this.networkId,\n          utxo.address,\n          { txHash: utxo.tx_hash, index: utxo.output_index },\n          utxo.amount,\n          utxo.inline_datum\n        );\n        pools.push(pool);\n      } catch (err) {\n        errors.push(err);\n      }\n    }\n    return {\n      pools: pools,\n      errors: errors,\n    };\n  }\n\n  public async getV2Pools({\n    page,\n    count = 100,\n    order = \"asc\",\n  }: GetPoolsParams): Promise<{\n    pools: PoolV2.State[];\n    errors: unknown[];\n  }> {\n    const v2Config = DexV2Constant.CONFIG[this.networkId];\n    const utxos = await this.api.addressesUtxosAsset(\n      v2Config.poolScriptHashBech32,\n      v2Config.poolAuthenAsset,\n      {\n        count,\n        order,\n        page,\n      }\n    );\n\n    const pools: PoolV2.State[] = [];\n    const errors: unknown[] = [];\n    for (const utxo of utxos) {\n      try {\n        if (!utxo.inline_datum) {\n          throw new Error(`Cannot find datum of Pool V2, tx: ${utxo.tx_hash}`);\n        }\n        const pool = new PoolV2.State(\n          this.networkId,\n          utxo.address,\n          { txHash: utxo.tx_hash, index: utxo.output_index },\n          utxo.amount,\n          utxo.inline_datum\n        );\n        pools.push(pool);\n      } catch (err) {\n        errors.push(err);\n      }\n    }\n    return {\n      pools: pools,\n      errors: errors,\n    };\n  }\n\n  public async getV2PoolByPair(\n    assetA: Asset,\n    assetB: Asset\n  ): Promise<PoolV2.State | null> {\n    const [normalizedAssetA, normalizedAssetB] = normalizeAssets(\n      Asset.toString(assetA),\n      Asset.toString(assetB)\n    );\n    const { pools: allPools } = await this.getAllV2Pools();\n    return (\n      allPools.find(\n        (pool) =>\n          pool.assetA === normalizedAssetA && pool.assetB === normalizedAssetB\n      ) ?? null\n    );\n  }\n\n  public async getAllStablePools(): Promise<{\n    pools: StablePool.State[];\n    errors: unknown[];\n  }> {\n    const poolAddresses = StableswapConstant.CONFIG[this.networkId].map(\n      (cfg) => cfg.poolAddress\n    );\n    const pools: StablePool.State[] = [];\n    const errors: unknown[] = [];\n    for (const poolAddr of poolAddresses) {\n      const utxos = await this.api.addressesUtxosAll(poolAddr);\n      try {\n        for (const utxo of utxos) {\n          let datum: string;\n          if (utxo.inline_datum) {\n            datum = utxo.inline_datum;\n          } else if (utxo.data_hash) {\n            datum = await this.getDatumByDatumHash(utxo.data_hash);\n          } else {\n            throw new Error(\"Cannot find datum of Stable Pool\");\n          }\n          const pool = new StablePool.State(\n            this.networkId,\n            utxo.address,\n            { txHash: utxo.tx_hash, index: utxo.output_index },\n            utxo.amount,\n            datum\n          );\n          pools.push(pool);\n        }\n      } catch (err) {\n        errors.push(err);\n      }\n    }\n\n    return {\n      pools: pools,\n      errors: errors,\n    };\n  }\n\n  public async getStablePoolByNFT(\n    nft: Asset\n  ): Promise<StablePool.State | null> {\n    const poolAddress = StableswapConstant.CONFIG[this.networkId].find(\n      (cfg) => cfg.nftAsset === Asset.toString(nft)\n    )?.poolAddress;\n    if (!poolAddress) {\n      throw new Error(\n        `Cannot find Stable Pool having NFT ${Asset.toString(nft)}`\n      );\n    }\n    const utxos = await this.api.addressesUtxosAssetAll(\n      poolAddress,\n      Asset.toString(nft)\n    );\n    for (const utxo of utxos) {\n      let datum: string;\n      if (utxo.inline_datum) {\n        datum = utxo.inline_datum;\n      } else if (utxo.data_hash) {\n        datum = await this.getDatumByDatumHash(utxo.data_hash);\n      } else {\n        throw new Error(\"Cannot find datum of Stable Pool\");\n      }\n      const pool = new StablePool.State(\n        this.networkId,\n        utxo.address,\n        { txHash: utxo.tx_hash, index: utxo.output_index },\n        utxo.amount,\n        datum\n      );\n      return pool;\n    }\n\n    return null;\n  }\n}\n","import invariant from \"@minswap/tiny-invariant\";\n\nexport const MAX_SAFE_INTEGER = BigInt(Number.MAX_SAFE_INTEGER);\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: bigint): bigint {\n  invariant(value >= 0n, \"NEGATIVE\");\n\n  // rely on built in sqrt if possible\n  if (value < MAX_SAFE_INTEGER) {\n    return BigInt(Math.floor(Math.sqrt(Number(value))));\n  }\n\n  let z: bigint;\n  let x: bigint;\n  z = value;\n  x = value / 2n + 1n;\n  while (x < z) {\n    z = x;\n    x = (value / x + x) / 2n;\n  }\n  return z;\n}\n","import Big from \"big.js\";\n\nimport { sqrt } from \"./utils/sqrt.internal\";\n\n/**\n * Options to calculate Amount Out & Price Impact while swapping exact in\n * @amountIn The amount that we want to swap from\n * @reserveIn The Reserve of Asset In in Liquidity Pool\n * @reserveOut The Reserve of Asset Out in Liquidity Pool\n */\nexport type CalculateSwapExactInOptions = {\n  amountIn: bigint;\n  reserveIn: bigint;\n  reserveOut: bigint;\n};\n/**\n * Calculate Amount Out & Price Impact while swapping exact in\n * @param options See @CalculateSwapExactInOptions description\n * @returns The amount of the other token that we get from the swap and its price impact\n */\nexport function calculateSwapExactIn(options: CalculateSwapExactInOptions): {\n  amountOut: bigint;\n  priceImpact: Big;\n} {\n  const { amountIn, reserveIn, reserveOut } = options;\n  const amtOutNumerator = amountIn * 997n * reserveOut;\n  const amtOutDenominator = amountIn * 997n + reserveIn * 1000n;\n\n  const priceImpactNumerator =\n    reserveOut * amountIn * amtOutDenominator * 997n -\n    amtOutNumerator * reserveIn * 1000n;\n  const priceImpactDenominator =\n    reserveOut * amountIn * amtOutDenominator * 1000n;\n\n  return {\n    amountOut: amtOutNumerator / amtOutDenominator,\n    priceImpact: new Big(priceImpactNumerator.toString())\n      .mul(new Big(100))\n      .div(new Big(priceImpactDenominator.toString())),\n  };\n}\n\n/**\n * Options to calculate necessary Amount In & Price Impact to cover the @exactAmountOut while swapping exact out\n * @exactAmountOut The exact amount that we want to receive\n * @reserveIn The Reserve of Asset In in Liquidity Pool\n * @reserveOut The Reserve of Asset Out in Liquidity Pool\n */\nexport type CalculateSwapExactOutOptions = {\n  exactAmountOut: bigint;\n  reserveIn: bigint;\n  reserveOut: bigint;\n};\n/**\n * Calculate necessary Amount In & Price Impact to cover the @exactAmountOut while swapping exact out\n * @param options See @CalculateSwapExactOutOptions description\n * @returns The amount needed of the input token for the swap and its price impact\n */\nexport function calculateSwapExactOut(options: CalculateSwapExactOutOptions): {\n  amountIn: bigint;\n  priceImpact: Big;\n} {\n  const { exactAmountOut, reserveIn, reserveOut } = options;\n  const amtInNumerator = reserveIn * exactAmountOut * 1000n;\n  const amtInDenominator = (reserveOut - exactAmountOut) * 997n;\n\n  const priceImpactNumerator =\n    reserveOut * amtInNumerator * 997n -\n    exactAmountOut * amtInDenominator * reserveIn * 1000n;\n  const priceImpactDenominator = reserveOut * amtInNumerator * 1000n;\n\n  return {\n    amountIn: amtInNumerator / amtInDenominator + 1n,\n    priceImpact: new Big(priceImpactNumerator.toString())\n      .mul(new Big(100))\n      .div(new Big(priceImpactDenominator.toString())),\n  };\n}\n\n/**\n * Options to calculate LP Amount while depositing\n * @depositedAmountA Amount of Asset A you want to deposit\n * @depositedAmountB Amount of Asset B you want to deposit\n * @reserveA Reserve of Asset A in Liquidity Pool\n * @reserveB Reserve of Asset B in Liquidity Pool\n * @totalLiquidity Total Circulating of LP Token in Liquidity Pool\n */\nexport type CalculateDepositOptions = {\n  depositedAmountA: bigint;\n  depositedAmountB: bigint;\n  reserveA: bigint;\n  reserveB: bigint;\n  totalLiquidity: bigint;\n};\n\n/**\n * Calculate LP Amount while depositing\n * @param options See @CalculateDepositOptions description\n * @returns The amount needed of Asset A and Asset and LP Token Amount you will receive\n */\nexport function calculateDeposit(options: CalculateDepositOptions): {\n  necessaryAmountA: bigint;\n  necessaryAmountB: bigint;\n  lpAmount: bigint;\n} {\n  const {\n    depositedAmountA,\n    depositedAmountB,\n    reserveA,\n    reserveB,\n    totalLiquidity,\n  } = options;\n  const deltaLiquidityA = (depositedAmountA * totalLiquidity) / reserveA;\n  const deltaLiquidityB = (depositedAmountB * totalLiquidity) / reserveB;\n  let necessaryAmountA, necessaryAmountB, lpAmount: bigint;\n  if (deltaLiquidityA > deltaLiquidityB) {\n    necessaryAmountA = (depositedAmountB * reserveA) / reserveB;\n    necessaryAmountB = depositedAmountB;\n    lpAmount = deltaLiquidityB;\n  } else if (deltaLiquidityA < deltaLiquidityB) {\n    necessaryAmountA = depositedAmountA;\n    necessaryAmountB = (depositedAmountA * reserveB) / reserveA;\n    lpAmount = deltaLiquidityA;\n  } else {\n    necessaryAmountA = depositedAmountA;\n    necessaryAmountB = depositedAmountB;\n    lpAmount = deltaLiquidityA;\n  }\n  return {\n    necessaryAmountA: necessaryAmountA,\n    necessaryAmountB: necessaryAmountB,\n    lpAmount: lpAmount,\n  };\n}\n\n/**\n * Options to calculate amount A and amount B after withdrawing @withdrawalLPAmount out of Liquidity Pool\n * @withdrawalLPAmount LP Token amount you want to withdraw\n * @reserveA Reserve of Asset A in Liquidity Pool\n * @reserveB Reserve of Asset B in Liquidity Pool\n * @totalLiquidity Total Circulating of LP Token in Liquidity Pool\n */\nexport type CalculateWithdrawOptions = {\n  withdrawalLPAmount: bigint;\n  reserveA: bigint;\n  reserveB: bigint;\n  totalLiquidity: bigint;\n};\n\n/**\n * Calculate amount A and amount B after withdrawing @withdrawalLPAmount out of Liquidity Pool\n * @param options See @CalculateWithdrawOptions description\n * @returns amount A and amount B you will receive\n */\nexport function calculateWithdraw(options: CalculateWithdrawOptions): {\n  amountAReceive: bigint;\n  amountBReceive: bigint;\n} {\n  const { withdrawalLPAmount, reserveA, reserveB, totalLiquidity } = options;\n  return {\n    amountAReceive: (withdrawalLPAmount * reserveA) / totalLiquidity,\n    amountBReceive: (withdrawalLPAmount * reserveB) / totalLiquidity,\n  };\n}\n\n/**\n * Options to calculate LP Amount while zapping\n * @amountIn Amount you want to zap\n * @reserveIn Reserve of Asset which you want to zap in Liquidity Pool\n * @reserveOut Reserve of other Asset in Liquidity Pool\n * @totalLiquidity Total Circulating of LP Token in Liquidity Pool\n */\nexport type CalculateZapInOptions = {\n  amountIn: bigint;\n  reserveIn: bigint;\n  reserveOut: bigint;\n  totalLiquidity: bigint;\n};\n\n/**\n * Calculate LP Amount while zapping\n * @param options See @CalculateZapInOptions description\n * @returns Amount of LP Token you will receive\n */\nexport function calculateZapIn(options: CalculateZapInOptions): bigint {\n  const { amountIn, reserveIn, reserveOut, totalLiquidity } = options;\n  const swapAmountIn =\n    (sqrt(\n      1997n ** 2n * reserveIn ** 2n + 4n * 997n * 1000n * amountIn * reserveIn\n    ) -\n      1997n * reserveIn) /\n    (2n * 997n);\n  const swapToAssetOutAmount = calculateSwapExactIn({\n    amountIn: swapAmountIn,\n    reserveIn: reserveIn,\n    reserveOut: reserveOut,\n  }).amountOut;\n  return (\n    (swapToAssetOutAmount * totalLiquidity) /\n    (reserveOut - swapToAssetOutAmount)\n  );\n}\n","import BigNumber from \"bignumber.js\";\nimport { Network } from \"lucid-cardano\";\n\nimport { BatcherFeeConfig } from \"./types.internal\";\n\nexport const FIXED_BATCHER_FEE = 2_000_000n;\n\nconst BATCHER_FEE_CONFIG_MAINNET: BatcherFeeConfig[] = [\n  {\n    maximumReduction: 25,\n    startTime: new Date(\"2022-09-14T07:00:00.000Z\"),\n    endTime: undefined,\n    maximumAmountMIN: 50_000_000_000n, // 50K MIN\n    maximumAmountADAMINLP: 5_000_000_000n, // 5B ADA-MIN LP\n  },\n];\n\nconst BATCHER_FEE_CONFIG_TESTNET_PREPROD: BatcherFeeConfig[] = [\n  {\n    maximumReduction: 25,\n    startTime: new Date(\"2022-09-01T00:00:00.000Z\"),\n    endTime: undefined,\n    maximumAmountMIN: 10_000_000n,\n    maximumAmountADAMINLP: 100_000_000n,\n  },\n];\n\nfunction getBatcherFeeConfigs(network: Network): BatcherFeeConfig[] | null {\n  switch (network) {\n    case \"Mainnet\":\n      return BATCHER_FEE_CONFIG_MAINNET;\n    case \"Preprod\":\n      return BATCHER_FEE_CONFIG_TESTNET_PREPROD;\n    default:\n      return null;\n  }\n}\n\nexport function getBatcherFee(\n  network: Network,\n  amountMIN: bigint,\n  amountLP: bigint\n): bigint {\n  const currentTime = new Date().getTime();\n  const batcherFeeConfigs = getBatcherFeeConfigs(network);\n  if (!batcherFeeConfigs) {\n    return FIXED_BATCHER_FEE;\n  }\n  const activeConfig = batcherFeeConfigs.find((c) => {\n    return c.startTime.getTime() <= currentTime && c.endTime\n      ? currentTime <= c.endTime.getTime()\n      : true;\n  });\n  if (!activeConfig) {\n    return FIXED_BATCHER_FEE;\n  }\n\n  const redunctionOnHoldingMIN = new BigNumber(amountMIN.toString()).div(\n    activeConfig.maximumAmountMIN.toString()\n  );\n  const redunctionOnHoldingLP = new BigNumber(amountLP.toString()).div(\n    activeConfig.maximumAmountADAMINLP.toString()\n  );\n  const totalReductionAmountRatio = redunctionOnHoldingMIN.plus(\n    redunctionOnHoldingLP\n  );\n\n  // Maximum ratio is 1\n  const maximumReductionAmountRatio =\n    totalReductionAmountRatio.isGreaterThanOrEqualTo(new BigNumber(1))\n      ? new BigNumber(1)\n      : totalReductionAmountRatio;\n\n  // Apply the ratio to calculate batcher fee reduction\n  const totalReduction = new BigNumber(activeConfig.maximumReduction)\n    .multipliedBy(maximumReductionAmountRatio)\n    .div(new BigNumber(100));\n\n  // New batcher fee = (1 - reduction) * DEFAULT BATCHER FEE\n  const batcherFee = new BigNumber(1)\n    .minus(totalReduction)\n    .multipliedBy(new BigNumber(FIXED_BATCHER_FEE.toString()))\n    .toFixed(0);\n  return BigInt(batcherFee);\n}\n","import { Address, Constr, Data } from \"lucid-cardano\";\n\nimport { AddressPlutusData } from \"./address.internal\";\nimport { Asset } from \"./asset\";\nimport { NetworkId } from \"./network\";\n\nexport namespace OrderV1 {\n  export enum StepType {\n    SWAP_EXACT_IN = 0,\n    SWAP_EXACT_OUT,\n    DEPOSIT,\n    WITHDRAW,\n    ZAP_IN,\n  }\n\n  export type SwapExactIn = {\n    type: StepType.SWAP_EXACT_IN;\n    desiredAsset: Asset;\n    minimumReceived: bigint;\n  };\n\n  export type SwapExactOut = {\n    type: StepType.SWAP_EXACT_OUT;\n    desiredAsset: Asset;\n    expectedReceived: bigint;\n  };\n\n  export type Deposit = {\n    type: StepType.DEPOSIT;\n    minimumLP: bigint;\n  };\n\n  export type Withdraw = {\n    type: StepType.WITHDRAW;\n    minimumAssetA: bigint;\n    minimumAssetB: bigint;\n  };\n\n  export type ZapIn = {\n    type: StepType.ZAP_IN;\n    desiredAsset: Asset;\n    minimumLP: bigint;\n  };\n\n  export type Step =\n    | SwapExactIn\n    | SwapExactOut\n    | Deposit\n    | Withdraw\n    | ZapIn;\n\n  export type Datum = {\n    sender: Address;\n    receiver: Address;\n    receiverDatumHash?: string;\n    step: Step;\n    batcherFee: bigint;\n    depositADA: bigint;\n  };\n\n  export namespace Datum {\n    export function toPlutusData(datum: Datum): Constr<Data> {\n      const {\n        sender,\n        receiver,\n        receiverDatumHash,\n        step,\n        batcherFee,\n        depositADA,\n      } = datum;\n      const senderConstr = AddressPlutusData.toPlutusData(sender);\n      const receiverConstr = AddressPlutusData.toPlutusData(receiver);\n      const receiverDatumHashConstr = receiverDatumHash\n        ? new Constr(0, [receiverDatumHash])\n        : new Constr(1, []);\n      let datumConstr: Constr<Data>;\n      switch (step.type) {\n        case StepType.SWAP_EXACT_IN: {\n          datumConstr = new Constr(0, [\n            senderConstr,\n            receiverConstr,\n            receiverDatumHashConstr,\n            new Constr(StepType.SWAP_EXACT_IN, [\n              Asset.toPlutusData(step.desiredAsset),\n              step.minimumReceived,\n            ]),\n            batcherFee,\n            depositADA,\n          ]);\n          break;\n        }\n        case StepType.SWAP_EXACT_OUT: {\n          datumConstr = new Constr(0, [\n            senderConstr,\n            receiverConstr,\n            receiverDatumHashConstr,\n            new Constr(StepType.SWAP_EXACT_OUT, [\n              Asset.toPlutusData(step.desiredAsset),\n              step.expectedReceived,\n            ]),\n            batcherFee,\n            depositADA,\n          ]);\n          break;\n        }\n        case StepType.DEPOSIT: {\n          datumConstr = new Constr(0, [\n            senderConstr,\n            receiverConstr,\n            receiverDatumHashConstr,\n            new Constr(StepType.DEPOSIT, [step.minimumLP]),\n            batcherFee,\n            depositADA,\n          ]);\n          break;\n        }\n        case StepType.WITHDRAW: {\n          datumConstr = new Constr(0, [\n            senderConstr,\n            receiverConstr,\n            receiverDatumHashConstr,\n            new Constr(StepType.WITHDRAW, [\n              step.minimumAssetA,\n              step.minimumAssetB,\n            ]),\n            batcherFee,\n            depositADA,\n          ]);\n          break;\n        }\n        case StepType.ZAP_IN: {\n          datumConstr = new Constr(0, [\n            senderConstr,\n            receiverConstr,\n            receiverDatumHashConstr,\n            new Constr(StepType.ZAP_IN, [\n              Asset.toPlutusData(step.desiredAsset),\n              step.minimumLP,\n            ]),\n            batcherFee,\n            depositADA,\n          ]);\n          break;\n        }\n      }\n\n      return datumConstr;\n    }\n\n    export function fromPlutusData(\n      networkId: NetworkId,\n      data: Constr<Data>\n    ): Datum {\n      if (data.index !== 0) {\n        throw new Error(`Index of Order Datum must be 0, actual: ${data.index}`);\n      }\n      const sender = AddressPlutusData.fromPlutusData(\n        networkId,\n        data.fields[0] as Constr<Data>\n      );\n      const receiver = AddressPlutusData.fromPlutusData(\n        networkId,\n        data.fields[1] as Constr<Data>\n      );\n      let receiverDatumHash: string | undefined = undefined;\n      const maybeReceiverDatumHash = data.fields[2] as Constr<Data>;\n      switch (maybeReceiverDatumHash.index) {\n        case 0: {\n          receiverDatumHash = maybeReceiverDatumHash.fields[0] as string;\n          break;\n        }\n        case 1: {\n          receiverDatumHash = undefined;\n          break;\n        }\n        default: {\n          throw new Error(\n            `Index of Receiver Datum Hash must be 0 or 1, actual: ${maybeReceiverDatumHash.index}`\n          );\n        }\n      }\n      let step: Step;\n      const orderStepConstr = data.fields[3] as Constr<Data>;\n      switch (orderStepConstr.index) {\n        case StepType.SWAP_EXACT_IN: {\n          step = {\n            type: StepType.SWAP_EXACT_IN,\n            desiredAsset: Asset.fromPlutusData(\n              orderStepConstr.fields[0] as Constr<Data>\n            ),\n            minimumReceived: orderStepConstr.fields[1] as bigint,\n          };\n          break;\n        }\n        case StepType.SWAP_EXACT_OUT: {\n          step = {\n            type: StepType.SWAP_EXACT_OUT,\n            desiredAsset: Asset.fromPlutusData(\n              orderStepConstr.fields[0] as Constr<Data>\n            ),\n            expectedReceived: orderStepConstr.fields[1] as bigint,\n          };\n          break;\n        }\n        case StepType.DEPOSIT: {\n          step = {\n            type: StepType.DEPOSIT,\n            minimumLP: orderStepConstr.fields[0] as bigint,\n          };\n          break;\n        }\n        case StepType.WITHDRAW: {\n          step = {\n            type: StepType.WITHDRAW,\n            minimumAssetA: orderStepConstr.fields[0] as bigint,\n            minimumAssetB: orderStepConstr.fields[1] as bigint,\n          };\n          break;\n        }\n        case StepType.ZAP_IN: {\n          step = {\n            type: StepType.ZAP_IN,\n            desiredAsset: Asset.fromPlutusData(\n              orderStepConstr.fields[0] as Constr<Data>\n            ),\n            minimumLP: orderStepConstr.fields[1] as bigint,\n          };\n          break;\n        }\n        default: {\n          throw new Error(\n            `Index of Order Step must be in 0-4, actual: ${orderStepConstr.index}`\n          );\n        }\n      }\n\n      const batcherFee = data.fields[4] as bigint;\n      const depositADA = data.fields[5] as bigint;\n      return {\n        sender: sender,\n        receiver: receiver,\n        receiverDatumHash: receiverDatumHash,\n        step: step,\n        batcherFee: batcherFee,\n        depositADA: depositADA,\n      };\n    }\n  }\n\n  export enum Redeemer {\n    APPLY_ORDER = 0,\n    CANCEL_ORDER,\n  }\n}\n","import invariant from \"@minswap/tiny-invariant\";\nimport {\n  Address,\n  Assets,\n  Constr,\n  Data,\n  Lucid,\n  Network,\n  SpendingValidator,\n  TxComplete,\n  UTxO,\n} from \"lucid-cardano\";\n\nimport { getBatcherFee } from \"./batcher-fee-reduction/configs.internal\";\nimport { Asset } from \"./types/asset\";\nimport {\n  BATCHER_FEE_REDUCTION_SUPPORTED_ASSET,\n  DexV1Constant,\n  FIXED_DEPOSIT_ADA,\n  MetadataMessage,\n} from \"./types/constants\";\nimport { NetworkId } from \"./types/network\";\nimport { OrderV1 } from \"./types/order\";\n\n/**\n * Common options for build Minswap transaction\n * @sender The owner of this order, it will be used for cancelling this order\n * @availableUtxos Available UTxOs can be used in transaction\n */\ntype CommonOptions = {\n  sender: Address;\n  availableUtxos: UTxO[];\n};\n\n/**\n * Options for building cancel Order\n * @orderTxId Transaction ID which order is created\n * @sender The owner of this order. The @sender must be matched with data in Order's Datum\n */\nexport type BuildCancelOrderOptions = {\n  orderUtxo: UTxO;\n  sender: Address;\n};\n\n/**\n * Options for building Deposit Order\n * @assetA @assetB Define pair which you want to deposit to\n * @amountA @amountB Define amount which you want to deposit to\n * @minimumLPReceived Minimum Received Amount you can accept after order is executed\n */\nexport type BuildDepositTxOptions = CommonOptions & {\n  // sender: Address;\n  assetA: Asset;\n  assetB: Asset;\n  amountA: bigint;\n  amountB: bigint;\n  minimumLPReceived: bigint;\n};\n\n/**\n * Options for building Zap In Order\n * @assetIn Asset you want to Zap\n * @assetOut The remaining asset of Pool which you want to Zap.\n *      For eg, in Pool ADA-MIN, if @assetIn is ADA then @assetOut will be MIN and vice versa\n * @minimumLPReceived Minimum Received Amount you can accept after order is executed\n */\nexport type BuildZapInTxOptions = CommonOptions & {\n  sender: Address;\n  assetIn: Asset;\n  amountIn: bigint;\n  assetOut: Asset;\n  minimumLPReceived: bigint;\n};\n\n/**\n * Options for building Withdrawal Order\n * @lpAsset LP Asset will be withdrawed\n * @lpAmount LP Asset amount will be withdrawed\n * @minimumAssetAReceived Minimum Received of Asset A in the Pool you can accept after order is executed\n * @minimumAssetBReceived Minimum Received of Asset A in the Pool you can accept after order is executed\n */\nexport type BuildWithdrawTxOptions = CommonOptions & {\n  sender: Address;\n  lpAsset: Asset;\n  lpAmount: bigint;\n  minimumAssetAReceived: bigint;\n  minimumAssetBReceived: bigint;\n};\n\n/**\n * Options for building Swap Exact Out Order\n * @assetIn Asset you want to Swap\n * @assetOut Asset you want to receive\n * @maximumAmountIn The maximum Amount of Asset In which will be spent after order is executed\n * @expectedAmountOut The expected Amount of Asset Out you want to receive after order is executed\n */\nexport type BuildSwapExactOutTxOptions = CommonOptions & {\n  sender: Address;\n  assetIn: Asset;\n  assetOut: Asset;\n  maximumAmountIn: bigint;\n  expectedAmountOut: bigint;\n};\n\n/**\n * Options for building Swap Exact In Order\n * @assetIn Asset and its amount you want to Swap\n * @amountIn Amount of Asset In you want to Swap\n * @assetOut Asset and you want to receive\n * @minimumAmountOut The minimum Amount of Asset Out you can accept after order is executed\n * @isLimitOrder Define this order is Limit Order or not\n */\nexport type BuildSwapExactInTxOptions = CommonOptions & {\n  sender: Address;\n  assetIn: Asset;\n  amountIn: bigint;\n  assetOut: Asset;\n  minimumAmountOut: bigint;\n  isLimitOrder: boolean;\n};\n\nexport class Dex {\n  private readonly lucid: Lucid;\n  private readonly network: Network;\n  private readonly networkId: NetworkId;\n\n  constructor(lucid: Lucid) {\n    this.lucid = lucid;\n    this.network = lucid.network;\n    this.networkId =\n      lucid.network === \"Mainnet\" ? NetworkId.MAINNET : NetworkId.TESTNET;\n  }\n\n  async buildSwapExactInTx(\n    options: BuildSwapExactInTxOptions\n  ): Promise<TxComplete> {\n    const {\n      sender,\n      assetIn,\n      amountIn,\n      assetOut,\n      minimumAmountOut,\n      isLimitOrder,\n      availableUtxos,\n    } = options;\n    invariant(amountIn > 0n, \"amount in must be positive\");\n    invariant(minimumAmountOut > 0n, \"minimum amount out must be positive\");\n    const orderAssets: Assets = { [Asset.toString(assetIn)]: amountIn };\n    const { batcherFee, reductionAssets } = this.calculateBatcherFee(\n      availableUtxos,\n      orderAssets\n    );\n    if (orderAssets[\"lovelace\"]) {\n      orderAssets[\"lovelace\"] += FIXED_DEPOSIT_ADA + batcherFee;\n    } else {\n      orderAssets[\"lovelace\"] = FIXED_DEPOSIT_ADA + batcherFee;\n    }\n    const datum: OrderV1.Datum = {\n      sender: sender,\n      receiver: sender,\n      receiverDatumHash: undefined,\n      step: {\n        type: OrderV1.StepType.SWAP_EXACT_IN,\n        desiredAsset: assetOut,\n        minimumReceived: minimumAmountOut,\n      },\n      batcherFee: batcherFee,\n      depositADA: FIXED_DEPOSIT_ADA,\n    };\n    const tx = this.lucid\n      .newTx()\n      .payToContract(\n        DexV1Constant.ORDER_BASE_ADDRESS[this.networkId],\n        Data.to(OrderV1.Datum.toPlutusData(datum)),\n        orderAssets\n      )\n      .payToAddress(sender, reductionAssets)\n      .addSigner(sender);\n    if (isLimitOrder) {\n      tx.attachMetadata(674, {\n        msg: [MetadataMessage.SWAP_EXACT_IN_LIMIT_ORDER],\n      });\n    } else {\n      tx.attachMetadata(674, { msg: [MetadataMessage.SWAP_EXACT_IN_ORDER] });\n    }\n    return await tx.complete();\n  }\n\n  async buildSwapExactOutTx(\n    options: BuildSwapExactOutTxOptions\n  ): Promise<TxComplete> {\n    const {\n      sender,\n      assetIn,\n      assetOut,\n      maximumAmountIn,\n      expectedAmountOut,\n      availableUtxos,\n    } = options;\n    invariant(\n      maximumAmountIn > 0n && expectedAmountOut > 0n,\n      \"amount in and out must be positive\"\n    );\n    const orderAssets: Assets = { [Asset.toString(assetIn)]: maximumAmountIn };\n    const { batcherFee, reductionAssets } = this.calculateBatcherFee(\n      availableUtxos,\n      orderAssets\n    );\n    if (orderAssets[\"lovelace\"]) {\n      orderAssets[\"lovelace\"] += FIXED_DEPOSIT_ADA + batcherFee;\n    } else {\n      orderAssets[\"lovelace\"] = FIXED_DEPOSIT_ADA + batcherFee;\n    }\n    const datum: OrderV1.Datum = {\n      sender: sender,\n      receiver: sender,\n      receiverDatumHash: undefined,\n      step: {\n        type: OrderV1.StepType.SWAP_EXACT_OUT,\n        desiredAsset: assetOut,\n        expectedReceived: expectedAmountOut,\n      },\n      batcherFee: batcherFee,\n      depositADA: FIXED_DEPOSIT_ADA,\n    };\n\n    return await this.lucid\n      .newTx()\n      .payToContract(\n        DexV1Constant.ORDER_BASE_ADDRESS[this.networkId],\n        Data.to(OrderV1.Datum.toPlutusData(datum)),\n        orderAssets\n      )\n      .payToAddress(sender, reductionAssets)\n      .addSigner(sender)\n      .attachMetadata(674, { msg: [MetadataMessage.SWAP_EXACT_OUT_ORDER] })\n      .complete();\n  }\n\n  async buildWithdrawTx(options: BuildWithdrawTxOptions): Promise<TxComplete> {\n    const {\n      sender,\n      lpAsset,\n      lpAmount,\n      minimumAssetAReceived,\n      minimumAssetBReceived,\n      availableUtxos,\n    } = options;\n    invariant(lpAmount > 0n, \"LP amount must be positive\");\n    invariant(\n      minimumAssetAReceived > 0n && minimumAssetBReceived > 0n,\n      \"minimum asset received must be positive\"\n    );\n    const orderAssets: Assets = { [Asset.toString(lpAsset)]: lpAmount };\n    const { batcherFee, reductionAssets } = this.calculateBatcherFee(\n      availableUtxos,\n      orderAssets\n    );\n    if (orderAssets[\"lovelace\"]) {\n      orderAssets[\"lovelace\"] += FIXED_DEPOSIT_ADA + batcherFee;\n    } else {\n      orderAssets[\"lovelace\"] = FIXED_DEPOSIT_ADA + batcherFee;\n    }\n    const datum: OrderV1.Datum = {\n      sender: sender,\n      receiver: sender,\n      receiverDatumHash: undefined,\n      step: {\n        type: OrderV1.StepType.WITHDRAW,\n        minimumAssetA: minimumAssetAReceived,\n        minimumAssetB: minimumAssetBReceived,\n      },\n      batcherFee: batcherFee,\n      depositADA: FIXED_DEPOSIT_ADA,\n    };\n    return await this.lucid\n      .newTx()\n      .payToContract(\n        DexV1Constant.ORDER_BASE_ADDRESS[this.networkId],\n        Data.to(OrderV1.Datum.toPlutusData(datum)),\n        orderAssets\n      )\n      .payToAddress(sender, reductionAssets)\n      .addSigner(sender)\n      .attachMetadata(674, { msg: [MetadataMessage.WITHDRAW_ORDER] })\n      .complete();\n  }\n\n  async buildZapInTx(options: BuildZapInTxOptions): Promise<TxComplete> {\n    const {\n      sender,\n      assetIn,\n      amountIn,\n      assetOut,\n      minimumLPReceived,\n      availableUtxos,\n    } = options;\n    invariant(amountIn > 0n, \"amount in must be positive\");\n    invariant(minimumLPReceived > 0n, \"minimum LP received must be positive\");\n    const orderAssets: Assets = { [Asset.toString(assetIn)]: amountIn };\n    const { batcherFee, reductionAssets } = this.calculateBatcherFee(\n      availableUtxos,\n      orderAssets\n    );\n    if (orderAssets[\"lovelace\"]) {\n      orderAssets[\"lovelace\"] += FIXED_DEPOSIT_ADA + batcherFee;\n    } else {\n      orderAssets[\"lovelace\"] = FIXED_DEPOSIT_ADA + batcherFee;\n    }\n    const datum: OrderV1.Datum = {\n      sender: sender,\n      receiver: sender,\n      receiverDatumHash: undefined,\n      step: {\n        type: OrderV1.StepType.ZAP_IN,\n        desiredAsset: assetOut,\n        minimumLP: minimumLPReceived,\n      },\n      batcherFee: batcherFee,\n      depositADA: FIXED_DEPOSIT_ADA,\n    };\n\n    return await this.lucid\n      .newTx()\n      .payToContract(\n        DexV1Constant.ORDER_BASE_ADDRESS[this.networkId],\n        Data.to(OrderV1.Datum.toPlutusData(datum)),\n        orderAssets\n      )\n      .payToAddress(sender, reductionAssets)\n      .addSigner(sender)\n      .attachMetadata(674, { msg: [MetadataMessage.ZAP_IN_ORDER] })\n      .complete();\n  }\n\n  async buildDepositTx(options: BuildDepositTxOptions): Promise<TxComplete> {\n    const {\n      sender,\n      assetA,\n      assetB,\n      amountA,\n      amountB,\n      minimumLPReceived,\n      availableUtxos,\n    } = options;\n    invariant(amountA > 0n && amountB > 0n, \"amount must be positive\");\n    invariant(minimumLPReceived > 0n, \"minimum LP received must be positive\");\n    const orderAssets = {\n      [Asset.toString(assetA)]: amountA,\n      [Asset.toString(assetB)]: amountB,\n    };\n    const { batcherFee, reductionAssets } = this.calculateBatcherFee(\n      availableUtxos,\n      orderAssets\n    );\n    if (orderAssets[\"lovelace\"]) {\n      orderAssets[\"lovelace\"] += FIXED_DEPOSIT_ADA + batcherFee;\n    } else {\n      orderAssets[\"lovelace\"] = FIXED_DEPOSIT_ADA + batcherFee;\n    }\n    const datum: OrderV1.Datum = {\n      sender: sender,\n      receiver: sender,\n      receiverDatumHash: undefined,\n      step: {\n        type: OrderV1.StepType.DEPOSIT,\n        minimumLP: minimumLPReceived,\n      },\n      batcherFee: batcherFee,\n      depositADA: FIXED_DEPOSIT_ADA,\n    };\n    return await this.lucid\n      .newTx()\n      .payToContract(\n        DexV1Constant.ORDER_BASE_ADDRESS[this.networkId],\n        Data.to(OrderV1.Datum.toPlutusData(datum)),\n        orderAssets\n      )\n      .payToAddress(sender, reductionAssets)\n      .addSigner(sender)\n      .attachMetadata(674, { msg: [MetadataMessage.DEPOSIT_ORDER] })\n      .complete();\n  }\n\n  async buildCancelOrder(\n    options: BuildCancelOrderOptions\n  ): Promise<TxComplete> {\n    const { orderUtxo } = options;\n    const redeemer = Data.to(new Constr(OrderV1.Redeemer.CANCEL_ORDER, []));\n    const rawDatum = orderUtxo.datum;\n    invariant(\n      rawDatum,\n      `Cancel Order requires Order UTxOs along with its CBOR Datum`\n    );\n    const orderDatum = OrderV1.Datum.fromPlutusData(\n      this.networkId,\n      Data.from(rawDatum) as Constr<Data>\n    );\n    return await this.lucid\n      .newTx()\n      .collectFrom([orderUtxo], redeemer)\n      .addSigner(orderDatum.sender)\n      .attachSpendingValidator(<SpendingValidator>DexV1Constant.ORDER_SCRIPT)\n      .attachMetadata(674, { msg: [MetadataMessage.CANCEL_ORDER] })\n      .complete();\n  }\n\n  private calculateBatcherFee(\n    utxos: UTxO[],\n    orderAssets: Assets\n  ): {\n    batcherFee: bigint;\n    reductionAssets: Assets;\n  } {\n    const [minAsset, adaMINLPAsset] =\n      BATCHER_FEE_REDUCTION_SUPPORTED_ASSET[this.networkId];\n    let amountMIN = 0n;\n    let amountADAMINLP = 0n;\n    for (const utxo of utxos) {\n      if (utxo.assets[minAsset]) {\n        amountMIN += utxo.assets[minAsset];\n      }\n      if (utxo.assets[adaMINLPAsset]) {\n        amountADAMINLP += utxo.assets[adaMINLPAsset];\n      }\n    }\n    if (orderAssets[minAsset]) {\n      amountMIN -= orderAssets[minAsset];\n    }\n    if (orderAssets[adaMINLPAsset]) {\n      amountADAMINLP -= orderAssets[adaMINLPAsset];\n    }\n    const reductionAssets: Assets = {};\n    if (amountMIN > 0) {\n      reductionAssets[minAsset] = amountMIN;\n    }\n    if (amountADAMINLP > 0) {\n      reductionAssets[adaMINLPAsset] = amountADAMINLP;\n    }\n    return {\n      batcherFee: getBatcherFee(this.network, amountMIN, amountADAMINLP),\n      reductionAssets: reductionAssets,\n    };\n  }\n}\n"],"names":[],"mappings":"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"}