{"version":3,"file":"AssetAmount.js","names":["_fraction","require","_Asset","_typeof","o","Symbol","iterator","constructor","prototype","_classCallCheck","a","n","TypeError","_defineProperties","e","r","t","length","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","_defineProperty","value","i","_toPrimitive","toPrimitive","call","String","Number","AssetAmount","exports","_this","amount","arguments","undefined","metadata","DEFAULT_FUNGIBLE_TOKEN_DECIMALS","_this$metadata","decimals","_this$metadata2","fromValue","rhs","withAmount","add","subtract","withValue","sub","stringIdEquals","equalsAssetId","BigInt","id","toValue","withMetadata","exchangeMultiply","ar","denominator","numerator","Error","INVALID_METADATA","exchangeDivide","exchangeAt","_this$metadata3","_ar$denominator$metad","assetId","Fraction","Math","pow","asFraction","multiply","quotient"],"sources":["../../src/AssetAmount.ts"],"sourcesContent":["import { Fraction, TFractionLike, TIntegerLike } from \"@sundaeswap/fraction\";\n\nimport { IHasStringId, stringIdEquals, TFungibleToken } from \"./Asset.js\";\nimport { AssetRatio } from \"./AssetRatio.js\";\n\nexport interface IAssetAmountExtraMetadata {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n}\n\nexport interface IAssetAmountMetadata extends IAssetAmountExtraMetadata {\n  id?: string;\n  assetId: string;\n  decimals: number;\n}\n\n/**\n * Class representing a fungible token with BigInt amount, decimals and id.\n * @template T\n * @extends {IAssetAmountMetadata}\n * @implements {TFungibleToken}\n */\nexport class AssetAmount<T extends IAssetAmountMetadata = IAssetAmountMetadata>\n  implements TFungibleToken\n{\n  static readonly DEFAULT_FUNGIBLE_TOKEN_DECIMALS = 0;\n  static INVALID_METADATA =\n    \"Cannot perform exchange calculation on an AssetAmount with no metadata.\";\n\n  readonly metadata: T;\n  readonly id: string;\n  readonly decimals: number;\n  readonly amount: bigint;\n  readonly value: Fraction;\n\n  /**\n   * Represent a token amount and decimals as `Fraction` (`value`)\n   * @param {bigint} amount - The amount of token.\n   * @param {number} decimals - The decimal places of the token amount.\n   * @returns {Fraction} - The token amount represented as a fraction.\n   */\n  static toValue(amount: bigint, decimals = 0): Fraction {\n    return new Fraction(amount, 10n ** BigInt(decimals));\n  }\n\n  /**\n   * Creates a new `AssetAmount` instance with fraction like `value`, `decimals` and `id`\n   * @template T\n   * @param {TFractionLike} value - The token amount represented as a fraction.\n   * @param {number | T} metadata - The metadata associated with the asset amount.\n   * @returns {AssetAmount<T>} - A new AssetAmount instance.\n   */\n\n  static fromValue<T extends IAssetAmountMetadata = IAssetAmountMetadata>(\n    value: TFractionLike,\n    metadata: number | T = AssetAmount.DEFAULT_FUNGIBLE_TOKEN_DECIMALS,\n  ): AssetAmount<T> {\n    const decimals =\n      typeof metadata === \"number\" ? metadata : metadata.decimals;\n    return new AssetAmount<T>(\n      Fraction.asFraction(value).multiply(10 ** decimals).quotient,\n      metadata,\n    );\n  }\n\n  /**\n   * Creates a new `AssetAmount` instance with `amount`, `decimals` and `metadata`\n   * @param {TIntegerLike} amount - The token amount, bigint represented as string, number or bigint. Default: 0n.\n   * @param {number | T} metadata - The metadata associated with the asset amount.\n   */\n  constructor(\n    amount: TIntegerLike = 0n,\n    metadata: number | T = AssetAmount.DEFAULT_FUNGIBLE_TOKEN_DECIMALS,\n  ) {\n    this.amount = BigInt(amount);\n    this.decimals = typeof metadata === \"number\" ? metadata : metadata.decimals;\n    this.metadata = typeof metadata === \"number\" ? undefined : metadata;\n    this.id = typeof metadata === \"number\" ? undefined : metadata.id;\n    this.value = AssetAmount.toValue(this.amount, this.decimals);\n  }\n\n  withAmount = (amount: TIntegerLike): AssetAmount<T> => {\n    return new AssetAmount<T>(amount, this?.metadata ?? this.decimals);\n  };\n\n  withValue = (value: TFractionLike): AssetAmount<T> => {\n    return AssetAmount.fromValue<T>(value, this?.metadata ?? this.decimals);\n  };\n\n  withMetadata<U extends IAssetAmountMetadata>(metadata: U): AssetAmount<U> {\n    return new AssetAmount<U>(this.amount, metadata);\n  }\n\n  add = (rhs: AssetAmount): AssetAmount<T> => {\n    return this.withAmount(this.amount + rhs.amount);\n  };\n  plus = this.add;\n\n  subtract = (rhs: AssetAmount): AssetAmount<T> => {\n    return this.withAmount(this.amount - rhs.amount);\n  };\n  minus = this.subtract;\n  sub = this.subtract;\n\n  addValue = (value: TFractionLike): AssetAmount<T> => {\n    return this.withValue(this.value.add(value));\n  };\n  plusValue = this.add;\n\n  subtractValue = (value: TFractionLike): AssetAmount<T> => {\n    return this.withValue(this.value.sub(value));\n  };\n  minusValue = this.subtract;\n  subValue = this.subtract;\n\n  equalsAssetId = (rhs: IHasStringId): boolean => {\n    return stringIdEquals(this, rhs);\n  };\n  isSameAsset = this.equalsAssetId;\n\n  /**\n   * Multiplies the asset amount with an asset ratio and returns a new AssetAmount.\n   * @param {AssetRatio<T>} ar - The asset ratio to multiply with.\n   * @throws {Error} - Throws an error if the metadata is invalid or if the metadata does not match with the denominator's metadata.\n   * @returns {AssetAmount<T>} - A new AssetAmount representing the multiplication result.\n   */\n  exchangeMultiply(ar: AssetRatio<T>): AssetAmount<T> {\n    if (!this.metadata || !ar.denominator.metadata || !ar.numerator.metadata) {\n      throw new Error(AssetAmount.INVALID_METADATA);\n    }\n\n    return new AssetAmount<T>(\n      (this.amount * ar.numerator.amount) / ar.denominator.amount,\n      ar.numerator.metadata,\n    );\n  }\n\n  /**\n   * Divides the asset amount by an asset ratio and returns a new AssetAmount.\n   * @param {AssetRatio<T>} ar - The asset ratio to divide by.\n   * @throws {Error} - Throws an error if the metadata is invalid or if the metadata does not match with the numerator's metadata.\n   * @returns {AssetAmount<T>} - A new AssetAmount representing the division result.\n   */\n  exchangeDivide(ar: AssetRatio<T>): AssetAmount<T> {\n    if (!this.metadata || !ar.denominator.metadata || !ar.numerator.metadata) {\n      throw new Error(AssetAmount.INVALID_METADATA);\n    }\n\n    return new AssetAmount<T>(\n      (this.amount * ar.denominator.amount) / ar.numerator.amount,\n      ar.denominator.metadata,\n    );\n  }\n\n  /**\n   * Performs multiplication or division on the asset amount using an asset ratio, depending on the metadata.\n   * @param {AssetRatio<T>} ar - The asset ratio for the operation.\n   * @returns {AssetAmount<T>} - A new AssetAmount representing the result of the operation.\n   */\n  exchangeAt(ar: AssetRatio<T>): AssetAmount<T> {\n    if (this.metadata?.assetId === ar.denominator.metadata?.assetId) {\n      return this.exchangeMultiply(ar);\n    } else {\n      return this.exchangeDivide(ar);\n    }\n  }\n}\n"],"mappings":";;;;;;AAAA,IAAAA,SAAA,GAAAC,OAAA;AAEA,IAAAC,MAAA,GAAAD,OAAA;AAA0E,SAAAE,QAAAC,CAAA,sCAAAD,OAAA,wBAAAE,MAAA,uBAAAA,MAAA,CAAAC,QAAA,aAAAF,CAAA,kBAAAA,CAAA,gBAAAA,CAAA,WAAAA,CAAA,yBAAAC,MAAA,IAAAD,CAAA,CAAAG,WAAA,KAAAF,MAAA,IAAAD,CAAA,KAAAC,MAAA,CAAAG,SAAA,qBAAAJ,CAAA,KAAAD,OAAA,CAAAC,CAAA;AAAA,SAAAK,gBAAAC,CAAA,EAAAC,CAAA,UAAAD,CAAA,YAAAC,CAAA,aAAAC,SAAA;AAAA,SAAAC,kBAAAC,CAAA,EAAAC,CAAA,aAAAC,CAAA,MAAAA,CAAA,GAAAD,CAAA,CAAAE,MAAA,EAAAD,CAAA,UAAAZ,CAAA,GAAAW,CAAA,CAAAC,CAAA,GAAAZ,CAAA,CAAAc,UAAA,GAAAd,CAAA,CAAAc,UAAA,QAAAd,CAAA,CAAAe,YAAA,kBAAAf,CAAA,KAAAA,CAAA,CAAAgB,QAAA,QAAAC,MAAA,CAAAC,cAAA,CAAAR,CAAA,EAAAS,cAAA,CAAAnB,CAAA,CAAAoB,GAAA,GAAApB,CAAA;AAAA,SAAAqB,aAAAX,CAAA,EAAAC,CAAA,EAAAC,CAAA,WAAAD,CAAA,IAAAF,iBAAA,CAAAC,CAAA,CAAAN,SAAA,EAAAO,CAAA,GAAAC,CAAA,IAAAH,iBAAA,CAAAC,CAAA,EAAAE,CAAA,GAAAK,MAAA,CAAAC,cAAA,CAAAR,CAAA,iBAAAM,QAAA,SAAAN,CAAA;AAAA,SAAAY,gBAAAZ,CAAA,EAAAC,CAAA,EAAAC,CAAA,YAAAD,CAAA,GAAAQ,cAAA,CAAAR,CAAA,MAAAD,CAAA,GAAAO,MAAA,CAAAC,cAAA,CAAAR,CAAA,EAAAC,CAAA,IAAAY,KAAA,EAAAX,CAAA,EAAAE,UAAA,MAAAC,YAAA,MAAAC,QAAA,UAAAN,CAAA,CAAAC,CAAA,IAAAC,CAAA,EAAAF,CAAA;AAAA,SAAAS,eAAAP,CAAA,QAAAY,CAAA,GAAAC,YAAA,CAAAb,CAAA,gCAAAb,OAAA,CAAAyB,CAAA,IAAAA,CAAA,GAAAA,CAAA;AAAA,SAAAC,aAAAb,CAAA,EAAAD,CAAA,oBAAAZ,OAAA,CAAAa,CAAA,MAAAA,CAAA,SAAAA,CAAA,MAAAF,CAAA,GAAAE,CAAA,CAAAX,MAAA,CAAAyB,WAAA,kBAAAhB,CAAA,QAAAc,CAAA,GAAAd,CAAA,CAAAiB,IAAA,CAAAf,CAAA,EAAAD,CAAA,gCAAAZ,OAAA,CAAAyB,CAAA,UAAAA,CAAA,YAAAhB,SAAA,yEAAAG,CAAA,GAAAiB,MAAA,GAAAC,MAAA,EAAAjB,CAAA;AAc1E;AACA;AACA;AACA;AACA;AACA;AALA,IAMakB,WAAW,GAAAC,OAAA,CAAAD,WAAA;EA2CtB;AACF;AACA;AACA;AACA;EACE,SAAAA,YAAA,EAGE;IAAA,IAAAE,KAAA;IAAA,IAFAC,OAAoB,GAAAC,SAAA,CAAArB,MAAA,QAAAqB,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;IAAA,IACzBE,QAAoB,GAAAF,SAAA,CAAArB,MAAA,QAAAqB,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAGJ,WAAW,CAACO,+BAA+B;IAAAhC,eAAA,OAAAyB,WAAA;IAAAR,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA,qBASvD,UAACW,MAAoB,EAAqB;MAAA,IAAAK,cAAA;MACrD,OAAO,IAAIR,WAAW,CAAIG,MAAM,GAAAK,cAAA,GAAEN,KAAI,aAAJA,KAAI,uBAAJA,KAAI,CAAEI,QAAQ,cAAAE,cAAA,cAAAA,cAAA,GAAIN,KAAI,CAACO,QAAQ,CAAC;IACpE,CAAC;IAAAjB,eAAA,oBAEW,UAACC,KAAoB,EAAqB;MAAA,IAAAiB,eAAA;MACpD,OAAOV,WAAW,CAACW,SAAS,CAAIlB,KAAK,GAAAiB,eAAA,GAAER,KAAI,aAAJA,KAAI,uBAAJA,KAAI,CAAEI,QAAQ,cAAAI,eAAA,cAAAA,eAAA,GAAIR,KAAI,CAACO,QAAQ,CAAC;IACzE,CAAC;IAAAjB,eAAA,cAMK,UAACoB,GAAgB,EAAqB;MAC1C,OAAOV,KAAI,CAACW,UAAU,CAACX,KAAI,CAACC,MAAM,GAAGS,GAAG,CAACT,MAAM,CAAC;IAClD,CAAC;IAAAX,eAAA,eACM,IAAI,CAACsB,GAAG;IAAAtB,eAAA,mBAEJ,UAACoB,GAAgB,EAAqB;MAC/C,OAAOV,KAAI,CAACW,UAAU,CAACX,KAAI,CAACC,MAAM,GAAGS,GAAG,CAACT,MAAM,CAAC;IAClD,CAAC;IAAAX,eAAA,gBACO,IAAI,CAACuB,QAAQ;IAAAvB,eAAA,cACf,IAAI,CAACuB,QAAQ;IAAAvB,eAAA,mBAER,UAACC,KAAoB,EAAqB;MACnD,OAAOS,KAAI,CAACc,SAAS,CAACd,KAAI,CAACT,KAAK,CAACqB,GAAG,CAACrB,KAAK,CAAC,CAAC;IAC9C,CAAC;IAAAD,eAAA,oBACW,IAAI,CAACsB,GAAG;IAAAtB,eAAA,wBAEJ,UAACC,KAAoB,EAAqB;MACxD,OAAOS,KAAI,CAACc,SAAS,CAACd,KAAI,CAACT,KAAK,CAACwB,GAAG,CAACxB,KAAK,CAAC,CAAC;IAC9C,CAAC;IAAAD,eAAA,qBACY,IAAI,CAACuB,QAAQ;IAAAvB,eAAA,mBACf,IAAI,CAACuB,QAAQ;IAAAvB,eAAA,wBAER,UAACoB,GAAiB,EAAc;MAC9C,OAAO,IAAAM,qBAAc,EAAChB,KAAI,EAAEU,GAAG,CAAC;IAClC,CAAC;IAAApB,eAAA,sBACa,IAAI,CAAC2B,aAAa;IA5C9B,IAAI,CAAChB,MAAM,GAAGiB,MAAM,CAACjB,OAAM,CAAC;IAC5B,IAAI,CAACM,QAAQ,GAAG,OAAOH,QAAQ,KAAK,QAAQ,GAAGA,QAAQ,GAAGA,QAAQ,CAACG,QAAQ;IAC3E,IAAI,CAACH,QAAQ,GAAG,OAAOA,QAAQ,KAAK,QAAQ,GAAGD,SAAS,GAAGC,QAAQ;IACnE,IAAI,CAACe,EAAE,GAAG,OAAOf,QAAQ,KAAK,QAAQ,GAAGD,SAAS,GAAGC,QAAQ,CAACe,EAAE;IAChE,IAAI,CAAC5B,KAAK,GAAGO,WAAW,CAACsB,OAAO,CAAC,IAAI,CAACnB,MAAM,EAAE,IAAI,CAACM,QAAQ,CAAC;EAC9D;EAAC,OAAAlB,YAAA,CAAAS,WAAA;IAAAV,GAAA;IAAAG,KAAA,EAUD,SAAA8B,aAA6CjB,QAAW,EAAkB;MACxE,OAAO,IAAIN,WAAW,CAAI,IAAI,CAACG,MAAM,EAAEG,QAAQ,CAAC;IAClD;EAAC;IAAAhB,GAAA;IAAAG,KAAA;IA6BD;AACF;AACA;AACA;AACA;AACA;IACE,SAAA+B,iBAAiBC,EAAiB,EAAkB;MAClD,IAAI,CAAC,IAAI,CAACnB,QAAQ,IAAI,CAACmB,EAAE,CAACC,WAAW,CAACpB,QAAQ,IAAI,CAACmB,EAAE,CAACE,SAAS,CAACrB,QAAQ,EAAE;QACxE,MAAM,IAAIsB,KAAK,CAAC5B,WAAW,CAAC6B,gBAAgB,CAAC;MAC/C;MAEA,OAAO,IAAI7B,WAAW,CACnB,IAAI,CAACG,MAAM,GAAGsB,EAAE,CAACE,SAAS,CAACxB,MAAM,GAAIsB,EAAE,CAACC,WAAW,CAACvB,MAAM,EAC3DsB,EAAE,CAACE,SAAS,CAACrB,QACf,CAAC;IACH;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAAhB,GAAA;IAAAG,KAAA,EAMA,SAAAqC,eAAeL,EAAiB,EAAkB;MAChD,IAAI,CAAC,IAAI,CAACnB,QAAQ,IAAI,CAACmB,EAAE,CAACC,WAAW,CAACpB,QAAQ,IAAI,CAACmB,EAAE,CAACE,SAAS,CAACrB,QAAQ,EAAE;QACxE,MAAM,IAAIsB,KAAK,CAAC5B,WAAW,CAAC6B,gBAAgB,CAAC;MAC/C;MAEA,OAAO,IAAI7B,WAAW,CACnB,IAAI,CAACG,MAAM,GAAGsB,EAAE,CAACC,WAAW,CAACvB,MAAM,GAAIsB,EAAE,CAACE,SAAS,CAACxB,MAAM,EAC3DsB,EAAE,CAACC,WAAW,CAACpB,QACjB,CAAC;IACH;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAhB,GAAA;IAAAG,KAAA,EAKA,SAAAsC,WAAWN,EAAiB,EAAkB;MAAA,IAAAO,eAAA,EAAAC,qBAAA;MAC5C,IAAI,EAAAD,eAAA,OAAI,CAAC1B,QAAQ,cAAA0B,eAAA,uBAAbA,eAAA,CAAeE,OAAO,QAAAD,qBAAA,GAAKR,EAAE,CAACC,WAAW,CAACpB,QAAQ,cAAA2B,qBAAA,uBAAvBA,qBAAA,CAAyBC,OAAO,GAAE;QAC/D,OAAO,IAAI,CAACV,gBAAgB,CAACC,EAAE,CAAC;MAClC,CAAC,MAAM;QACL,OAAO,IAAI,CAACK,cAAc,CAACL,EAAE,CAAC;MAChC;IACF;EAAC;IAAAnC,GAAA;IAAAG,KAAA;IAlID;AACF;AACA;AACA;AACA;AACA;IACE,SAAA6B,QAAenB,MAAc,EAA0B;MAAA,IAAxBM,QAAQ,GAAAL,SAAA,CAAArB,MAAA,QAAAqB,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;MACzC,OAAO,IAAI+B,kBAAQ,CAAChC,MAAM,EAAAiC,IAAA,CAAAC,GAAA,CAAE,GAAG,EAAIjB,MAAM,CAACX,QAAQ,CAAC,EAAC;IACtD;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;EANE;IAAAnB,GAAA;IAAAG,KAAA,EAQA,SAAAkB,UACElB,KAAoB,EAEJ;MAAA,IADhBa,QAAoB,GAAAF,SAAA,CAAArB,MAAA,QAAAqB,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAGJ,WAAW,CAACO,+BAA+B;MAElE,IAAME,QAAQ,GACZ,OAAOH,QAAQ,KAAK,QAAQ,GAAGA,QAAQ,GAAGA,QAAQ,CAACG,QAAQ;MAC7D,OAAO,IAAIT,WAAW,CACpBmC,kBAAQ,CAACG,UAAU,CAAC7C,KAAK,CAAC,CAAC8C,QAAQ,CAAAH,IAAA,CAAAC,GAAA,CAAC,EAAE,EAAI5B,QAAQ,EAAC,CAAC+B,QAAQ,EAC5DlC,QACF,CAAC;IACH;EAAC;AAAA;AAAAd,eAAA,CAzCUQ,WAAW,qCAG4B,CAAC;AAAAR,eAAA,CAHxCQ,WAAW,sBAKpB,yEAAyE","ignoreList":[]}