{"version":3,"file":"AssetRatio.js","names":["_AssetAmount","require","_typeof","o","Symbol","iterator","constructor","prototype","_classCallCheck","a","n","TypeError","_defineProperties","e","r","t","length","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","_defineProperty","value","i","_toPrimitive","toPrimitive","call","String","Number","AssetRatio","exports","numerator","denominator","pool","metadata","assetA","assetId","getLimitPrice","decimalOffset","decimals","amount","toString","Math","pow","updateLimitPrice","limitPrice","_this$numerator$metad","_this$numerator","adjustedLimitPrice","newNumeratorAmount","BigInt","round","AssetAmount"],"sources":["../../src/AssetRatio.ts"],"sourcesContent":["import { AssetAmount, IAssetAmountMetadata } from \"./AssetAmount.js\";\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface IAssetRatioPool<T extends IAssetAmountMetadata = any> {\n  assetA: T;\n  assetB: T;\n}\n\n/**\n * This class represents an AssetRatio, which includes a numerator and a denominator AssetAmounts, and optionally, an AssetRatioPool.\n *\n * @class\n * @template T - Metadata type for the assets, which extends from the IAssetAmountMetadata interface.\n *\n * @property {AssetAmount<T>} numerator - The numerator part of the ratio, represented as an AssetAmount.\n * @property {AssetAmount<T>} denominator - The denominator part of the ratio, represented as an AssetAmount.\n * @property {IAssetRatioPool} [pool] - Optional property to represent an asset ratio pool.\n *\n * @example\n * const assetRatio = new AssetRatio(numeratorAsset, denominatorAsset, assetsPool);\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport class AssetRatio<T extends IAssetAmountMetadata = any> {\n  public numerator: AssetAmount<T>;\n  public denominator: AssetAmount<T>;\n\n  /**\n   * Creates a new AssetRatio.\n   *\n   * @constructor\n   * @param {AssetAmount<T>} numerator - The numerator AssetAmount.\n   * @param {AssetAmount<T>} denominator - The denominator AssetAmount.\n   * @param {IAssetRatioPool} [pool] - Optional assets pool data.\n   *\n   * If the pool and metadata for both numerator and denominator are provided, the numerator and denominator\n   * are arranged according to the pool's assetA assetId. If not, they are kept as they were provided.\n   */\n  constructor(\n    numerator: AssetAmount<T>,\n    denominator: AssetAmount<T>,\n    public pool?: IAssetRatioPool,\n  ) {\n    if (pool && numerator?.metadata && denominator?.metadata) {\n      this.numerator =\n        pool.assetA.assetId === numerator.metadata.assetId\n          ? numerator\n          : denominator;\n      this.denominator =\n        pool.assetA.assetId === numerator.metadata.assetId\n          ? denominator\n          : numerator;\n    } else {\n      this.numerator = numerator;\n      this.denominator = denominator;\n    }\n  }\n\n  /**\n   * Calculates the limit price.\n   *\n   * The limit price is calculated by dividing the numerator amount by the denominator amount,\n   * then adjusting for the difference in decimal places between the numerator and denominator.\n   *\n   * @returns {number} The calculated limit price.\n   */\n  getLimitPrice(): number {\n    const decimalOffset = this.denominator.decimals - this.numerator.decimals;\n    return (\n      (Number(this.numerator.amount.toString()) /\n        Number(this.denominator.amount.toString())) *\n      10 ** decimalOffset\n    );\n  }\n\n  /**\n   * Creates an asset ratio from a given limit price.\n   *\n   * The ratio is calculated by multiplying the denominator's amount with the limit price, adjusting for decimal differences.\n   *\n   * @param {number} limitPrice - The limit price used to create the asset ratio.\n   * @returns {AssetRatio<T>} The created asset ratio.\n   */\n  updateLimitPrice(limitPrice: number): AssetRatio<T> {\n    const decimalOffset = this.numerator.decimals - this.denominator.decimals;\n    const adjustedLimitPrice = limitPrice * 10 ** decimalOffset;\n\n    const newNumeratorAmount = BigInt(\n      Math.round(\n        Number(this.denominator.amount.toString()) * adjustedLimitPrice,\n      ),\n    );\n    const numerator = new AssetAmount<T>(\n      newNumeratorAmount,\n      this.numerator?.metadata ?? this.numerator.decimals,\n    );\n\n    return new AssetRatio<T>(numerator, this.denominator, this.pool);\n  }\n}\n"],"mappings":"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","ignoreList":[]}