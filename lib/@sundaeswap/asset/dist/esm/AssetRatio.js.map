{"version":3,"file":"AssetRatio.js","names":["AssetAmount","AssetRatio","constructor","numerator","denominator","pool","_defineProperty","metadata","assetA","assetId","getLimitPrice","decimalOffset","decimals","Number","amount","toString","updateLimitPrice","limitPrice","adjustedLimitPrice","newNumeratorAmount","BigInt","Math","round"],"sources":["../../src/AssetRatio.ts"],"sourcesContent":["import { AssetAmount, IAssetAmountMetadata } from \"./AssetAmount.js\";\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface IAssetRatioPool<T extends IAssetAmountMetadata = any> {\n  assetA: T;\n  assetB: T;\n}\n\n/**\n * This class represents an AssetRatio, which includes a numerator and a denominator AssetAmounts, and optionally, an AssetRatioPool.\n *\n * @class\n * @template T - Metadata type for the assets, which extends from the IAssetAmountMetadata interface.\n *\n * @property {AssetAmount<T>} numerator - The numerator part of the ratio, represented as an AssetAmount.\n * @property {AssetAmount<T>} denominator - The denominator part of the ratio, represented as an AssetAmount.\n * @property {IAssetRatioPool} [pool] - Optional property to represent an asset ratio pool.\n *\n * @example\n * const assetRatio = new AssetRatio(numeratorAsset, denominatorAsset, assetsPool);\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport class AssetRatio<T extends IAssetAmountMetadata = any> {\n  public numerator: AssetAmount<T>;\n  public denominator: AssetAmount<T>;\n\n  /**\n   * Creates a new AssetRatio.\n   *\n   * @constructor\n   * @param {AssetAmount<T>} numerator - The numerator AssetAmount.\n   * @param {AssetAmount<T>} denominator - The denominator AssetAmount.\n   * @param {IAssetRatioPool} [pool] - Optional assets pool data.\n   *\n   * If the pool and metadata for both numerator and denominator are provided, the numerator and denominator\n   * are arranged according to the pool's assetA assetId. If not, they are kept as they were provided.\n   */\n  constructor(\n    numerator: AssetAmount<T>,\n    denominator: AssetAmount<T>,\n    public pool?: IAssetRatioPool,\n  ) {\n    if (pool && numerator?.metadata && denominator?.metadata) {\n      this.numerator =\n        pool.assetA.assetId === numerator.metadata.assetId\n          ? numerator\n          : denominator;\n      this.denominator =\n        pool.assetA.assetId === numerator.metadata.assetId\n          ? denominator\n          : numerator;\n    } else {\n      this.numerator = numerator;\n      this.denominator = denominator;\n    }\n  }\n\n  /**\n   * Calculates the limit price.\n   *\n   * The limit price is calculated by dividing the numerator amount by the denominator amount,\n   * then adjusting for the difference in decimal places between the numerator and denominator.\n   *\n   * @returns {number} The calculated limit price.\n   */\n  getLimitPrice(): number {\n    const decimalOffset = this.denominator.decimals - this.numerator.decimals;\n    return (\n      (Number(this.numerator.amount.toString()) /\n        Number(this.denominator.amount.toString())) *\n      10 ** decimalOffset\n    );\n  }\n\n  /**\n   * Creates an asset ratio from a given limit price.\n   *\n   * The ratio is calculated by multiplying the denominator's amount with the limit price, adjusting for decimal differences.\n   *\n   * @param {number} limitPrice - The limit price used to create the asset ratio.\n   * @returns {AssetRatio<T>} The created asset ratio.\n   */\n  updateLimitPrice(limitPrice: number): AssetRatio<T> {\n    const decimalOffset = this.numerator.decimals - this.denominator.decimals;\n    const adjustedLimitPrice = limitPrice * 10 ** decimalOffset;\n\n    const newNumeratorAmount = BigInt(\n      Math.round(\n        Number(this.denominator.amount.toString()) * adjustedLimitPrice,\n      ),\n    );\n    const numerator = new AssetAmount<T>(\n      newNumeratorAmount,\n      this.numerator?.metadata ?? this.numerator.decimals,\n    );\n\n    return new AssetRatio<T>(numerator, this.denominator, this.pool);\n  }\n}\n"],"mappings":";;;AAAA,SAASA,WAAW,QAA8B,kBAAkB;;AAEpE;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,CAAuC;EAI5D;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,WAAWA,CACTC,SAAyB,EACzBC,WAA2B,EACpBC,IAAsB,EAC7B;IAAA,KADOA,IAAsB,GAAtBA,IAAsB;IAAAC,eAAA;IAAAA,eAAA;IAE7B,IAAID,IAAI,IAAIF,SAAS,EAAEI,QAAQ,IAAIH,WAAW,EAAEG,QAAQ,EAAE;MACxD,IAAI,CAACJ,SAAS,GACZE,IAAI,CAACG,MAAM,CAACC,OAAO,KAAKN,SAAS,CAACI,QAAQ,CAACE,OAAO,GAC9CN,SAAS,GACTC,WAAW;MACjB,IAAI,CAACA,WAAW,GACdC,IAAI,CAACG,MAAM,CAACC,OAAO,KAAKN,SAAS,CAACI,QAAQ,CAACE,OAAO,GAC9CL,WAAW,GACXD,SAAS;IACjB,CAAC,MAAM;MACL,IAAI,CAACA,SAAS,GAAGA,SAAS;MAC1B,IAAI,CAACC,WAAW,GAAGA,WAAW;IAChC;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEM,aAAaA,CAAA,EAAW;IACtB,MAAMC,aAAa,GAAG,IAAI,CAACP,WAAW,CAACQ,QAAQ,GAAG,IAAI,CAACT,SAAS,CAACS,QAAQ;IACzE,OACGC,MAAM,CAAC,IAAI,CAACV,SAAS,CAACW,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC,GACvCF,MAAM,CAAC,IAAI,CAACT,WAAW,CAACU,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC,GAC5C,EAAE,IAAIJ,aAAa;EAEvB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEK,gBAAgBA,CAACC,UAAkB,EAAiB;IAClD,MAAMN,aAAa,GAAG,IAAI,CAACR,SAAS,CAACS,QAAQ,GAAG,IAAI,CAACR,WAAW,CAACQ,QAAQ;IACzE,MAAMM,kBAAkB,GAAGD,UAAU,GAAG,EAAE,IAAIN,aAAa;IAE3D,MAAMQ,kBAAkB,GAAGC,MAAM,CAC/BC,IAAI,CAACC,KAAK,CACRT,MAAM,CAAC,IAAI,CAACT,WAAW,CAACU,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC,GAAGG,kBAC/C,CACF,CAAC;IACD,MAAMf,SAAS,GAAG,IAAIH,WAAW,CAC/BmB,kBAAkB,EAClB,IAAI,CAAChB,SAAS,EAAEI,QAAQ,IAAI,IAAI,CAACJ,SAAS,CAACS,QAC7C,CAAC;IAED,OAAO,IAAIX,UAAU,CAAIE,SAAS,EAAE,IAAI,CAACC,WAAW,EAAE,IAAI,CAACC,IAAI,CAAC;EAClE;AACF","ignoreList":[]}