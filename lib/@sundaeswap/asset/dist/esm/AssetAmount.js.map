{"version":3,"file":"AssetAmount.js","names":["Fraction","stringIdEquals","AssetAmount","toValue","amount","decimals","BigInt","fromValue","value","metadata","DEFAULT_FUNGIBLE_TOKEN_DECIMALS","asFraction","multiply","quotient","constructor","_defineProperty","rhs","withAmount","add","subtract","withValue","sub","equalsAssetId","undefined","id","withMetadata","exchangeMultiply","ar","denominator","numerator","Error","INVALID_METADATA","exchangeDivide","exchangeAt","assetId"],"sources":["../../src/AssetAmount.ts"],"sourcesContent":["import { Fraction, TFractionLike, TIntegerLike } from \"@sundaeswap/fraction\";\n\nimport { IHasStringId, stringIdEquals, TFungibleToken } from \"./Asset.js\";\nimport { AssetRatio } from \"./AssetRatio.js\";\n\nexport interface IAssetAmountExtraMetadata {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n}\n\nexport interface IAssetAmountMetadata extends IAssetAmountExtraMetadata {\n  id?: string;\n  assetId: string;\n  decimals: number;\n}\n\n/**\n * Class representing a fungible token with BigInt amount, decimals and id.\n * @template T\n * @extends {IAssetAmountMetadata}\n * @implements {TFungibleToken}\n */\nexport class AssetAmount<T extends IAssetAmountMetadata = IAssetAmountMetadata>\n  implements TFungibleToken\n{\n  static readonly DEFAULT_FUNGIBLE_TOKEN_DECIMALS = 0;\n  static INVALID_METADATA =\n    \"Cannot perform exchange calculation on an AssetAmount with no metadata.\";\n\n  readonly metadata: T;\n  readonly id: string;\n  readonly decimals: number;\n  readonly amount: bigint;\n  readonly value: Fraction;\n\n  /**\n   * Represent a token amount and decimals as `Fraction` (`value`)\n   * @param {bigint} amount - The amount of token.\n   * @param {number} decimals - The decimal places of the token amount.\n   * @returns {Fraction} - The token amount represented as a fraction.\n   */\n  static toValue(amount: bigint, decimals = 0): Fraction {\n    return new Fraction(amount, 10n ** BigInt(decimals));\n  }\n\n  /**\n   * Creates a new `AssetAmount` instance with fraction like `value`, `decimals` and `id`\n   * @template T\n   * @param {TFractionLike} value - The token amount represented as a fraction.\n   * @param {number | T} metadata - The metadata associated with the asset amount.\n   * @returns {AssetAmount<T>} - A new AssetAmount instance.\n   */\n\n  static fromValue<T extends IAssetAmountMetadata = IAssetAmountMetadata>(\n    value: TFractionLike,\n    metadata: number | T = AssetAmount.DEFAULT_FUNGIBLE_TOKEN_DECIMALS,\n  ): AssetAmount<T> {\n    const decimals =\n      typeof metadata === \"number\" ? metadata : metadata.decimals;\n    return new AssetAmount<T>(\n      Fraction.asFraction(value).multiply(10 ** decimals).quotient,\n      metadata,\n    );\n  }\n\n  /**\n   * Creates a new `AssetAmount` instance with `amount`, `decimals` and `metadata`\n   * @param {TIntegerLike} amount - The token amount, bigint represented as string, number or bigint. Default: 0n.\n   * @param {number | T} metadata - The metadata associated with the asset amount.\n   */\n  constructor(\n    amount: TIntegerLike = 0n,\n    metadata: number | T = AssetAmount.DEFAULT_FUNGIBLE_TOKEN_DECIMALS,\n  ) {\n    this.amount = BigInt(amount);\n    this.decimals = typeof metadata === \"number\" ? metadata : metadata.decimals;\n    this.metadata = typeof metadata === \"number\" ? undefined : metadata;\n    this.id = typeof metadata === \"number\" ? undefined : metadata.id;\n    this.value = AssetAmount.toValue(this.amount, this.decimals);\n  }\n\n  withAmount = (amount: TIntegerLike): AssetAmount<T> => {\n    return new AssetAmount<T>(amount, this?.metadata ?? this.decimals);\n  };\n\n  withValue = (value: TFractionLike): AssetAmount<T> => {\n    return AssetAmount.fromValue<T>(value, this?.metadata ?? this.decimals);\n  };\n\n  withMetadata<U extends IAssetAmountMetadata>(metadata: U): AssetAmount<U> {\n    return new AssetAmount<U>(this.amount, metadata);\n  }\n\n  add = (rhs: AssetAmount): AssetAmount<T> => {\n    return this.withAmount(this.amount + rhs.amount);\n  };\n  plus = this.add;\n\n  subtract = (rhs: AssetAmount): AssetAmount<T> => {\n    return this.withAmount(this.amount - rhs.amount);\n  };\n  minus = this.subtract;\n  sub = this.subtract;\n\n  addValue = (value: TFractionLike): AssetAmount<T> => {\n    return this.withValue(this.value.add(value));\n  };\n  plusValue = this.add;\n\n  subtractValue = (value: TFractionLike): AssetAmount<T> => {\n    return this.withValue(this.value.sub(value));\n  };\n  minusValue = this.subtract;\n  subValue = this.subtract;\n\n  equalsAssetId = (rhs: IHasStringId): boolean => {\n    return stringIdEquals(this, rhs);\n  };\n  isSameAsset = this.equalsAssetId;\n\n  /**\n   * Multiplies the asset amount with an asset ratio and returns a new AssetAmount.\n   * @param {AssetRatio<T>} ar - The asset ratio to multiply with.\n   * @throws {Error} - Throws an error if the metadata is invalid or if the metadata does not match with the denominator's metadata.\n   * @returns {AssetAmount<T>} - A new AssetAmount representing the multiplication result.\n   */\n  exchangeMultiply(ar: AssetRatio<T>): AssetAmount<T> {\n    if (!this.metadata || !ar.denominator.metadata || !ar.numerator.metadata) {\n      throw new Error(AssetAmount.INVALID_METADATA);\n    }\n\n    return new AssetAmount<T>(\n      (this.amount * ar.numerator.amount) / ar.denominator.amount,\n      ar.numerator.metadata,\n    );\n  }\n\n  /**\n   * Divides the asset amount by an asset ratio and returns a new AssetAmount.\n   * @param {AssetRatio<T>} ar - The asset ratio to divide by.\n   * @throws {Error} - Throws an error if the metadata is invalid or if the metadata does not match with the numerator's metadata.\n   * @returns {AssetAmount<T>} - A new AssetAmount representing the division result.\n   */\n  exchangeDivide(ar: AssetRatio<T>): AssetAmount<T> {\n    if (!this.metadata || !ar.denominator.metadata || !ar.numerator.metadata) {\n      throw new Error(AssetAmount.INVALID_METADATA);\n    }\n\n    return new AssetAmount<T>(\n      (this.amount * ar.denominator.amount) / ar.numerator.amount,\n      ar.denominator.metadata,\n    );\n  }\n\n  /**\n   * Performs multiplication or division on the asset amount using an asset ratio, depending on the metadata.\n   * @param {AssetRatio<T>} ar - The asset ratio for the operation.\n   * @returns {AssetAmount<T>} - A new AssetAmount representing the result of the operation.\n   */\n  exchangeAt(ar: AssetRatio<T>): AssetAmount<T> {\n    if (this.metadata?.assetId === ar.denominator.metadata?.assetId) {\n      return this.exchangeMultiply(ar);\n    } else {\n      return this.exchangeDivide(ar);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}