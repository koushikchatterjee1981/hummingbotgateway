{"version":3,"file":"Fraction.js","names":["FractionError","Fraction","compare","a","b","greaterThan","lessThan","asFraction","fraction","parseString","toString","fractionString","replace","match","base","exponent","split","map","Number","exponentBig","BigInt","Math","abs","scale","baseFraction","multiply","divide","includes","integerPart","fractionalPart","numerator","denominator","length","gcd","divisor","constructor","_defineProperty","subtract","lessThanOrEqual","equals","greaterThanOrEqual","Array","isArray","Error","DivisionByZero","ZERO","add","rhs","invert","quotient","getQuotient","remainder","toPrecision","decimals","getRemainder","getRemainderOrNull","formatQuotientToLocaleString","locale","Intl","NumberFormat","format","remainderToString","MAX_DECIMALS","substring","padStart","toNumber","formattedIntegerPart","formattedFractionalPart","toJSON","_key","_Fraction"],"sources":["../../src/Fraction.ts"],"sourcesContent":["// eslint-disable-next-line no-use-before-define\nexport type TFractionLike = number | string | bigint | Fraction;\nexport type TIntegerLike = number | string | bigint;\n\nexport enum FractionError {\n  DivisionByZero = \"DivisionByZero\",\n  // InvalidDecimals = \"InvalidDecimals\",\n}\n\n/**\n * Represents a rational number.\n * Provides basic arithmetic operations, and parsing/formatting.\n * TODO localized formatting\n */\nexport class Fraction {\n  static readonly MAX_DECIMALS = 30;\n  static readonly ZERO = new Fraction(0);\n  static readonly ONE = new Fraction(1);\n  static readonly HUNDRED = new Fraction(100);\n  static readonly THOUSAND = new Fraction(1000);\n\n  static compare(a: Fraction, b: Fraction): number {\n    if (a.greaterThan(b)) return 1;\n    if (a.lessThan(b)) return -1;\n    return 0;\n  }\n\n  static asFraction(fraction: TFractionLike): Fraction {\n    return fraction instanceof Fraction\n      ? fraction\n      : Fraction.parseString(fraction.toString());\n  }\n\n  // static fromLocaleString(numStr: string, locale?: string): Fraction {\n  //   const { decimalSeparator, groupSeparator } = getLocaleFormatOptions(locale);\n  //   const [integerPart, fractionalPart] = numStr.split(decimalSeparator);\n  //   const quotient = BigInt(integerPart.split(groupSeparator).join(\"\"));\n  //   if (!fractionalPart?.length) return new Fraction(quotient);\n  //   const denominator = 10n ** BigInt(fractionalPart.length);\n  //   return new Fraction(\n  //     quotient * denominator + BigInt(fractionalPart),\n  //     denominator\n  //   );\n  // }\n\n  static parseString(fractionString: string): Fraction {\n    // Parse a number in various forms (1000, 1.0003, 1.23e4, 1.23e-4) into a numerator and denominator\n    fractionString = fractionString.replace(/,/g, \"\");\n\n    if (fractionString.match(/[eE]/)) {\n      const [base, exponent] = fractionString.split(/[eE]/).map(Number);\n      const exponentBig = BigInt(Math.abs(exponent));\n      const scale = 10n ** exponentBig;\n      const baseFraction = this.parseString(base.toString());\n      return exponent > 0\n        ? baseFraction.multiply(scale)\n        : baseFraction.divide(scale);\n    }\n\n    if (fractionString.includes(\".\")) {\n      const [integerPart, fractionalPart] = fractionString.split(\".\");\n      const numerator = BigInt(integerPart + fractionalPart);\n      const denominator = 10n ** BigInt(fractionalPart.length);\n\n      // Simplify the fraction using the GCD function\n      const gcd = (a, b) => (b === 0n ? a : gcd(b, a % b));\n      const divisor = gcd(numerator, denominator);\n      return new Fraction(numerator / divisor, denominator / divisor);\n    }\n\n    return new Fraction(fractionString);\n  }\n\n  readonly numerator: bigint;\n  readonly denominator: bigint;\n\n  constructor(\n    numerator: TIntegerLike | [bigint, bigint],\n    denominator?: TIntegerLike,\n  ) {\n    if (Array.isArray(numerator)) {\n      [numerator, denominator] = numerator;\n    }\n    this.numerator = BigInt(numerator);\n    this.denominator = BigInt(denominator || 1n);\n    if (this.denominator === 0n) throw new Error(FractionError.DivisionByZero);\n  }\n\n  abs(): Fraction {\n    return this.lessThan(Fraction.ZERO) ? this.multiply(-1) : this;\n  }\n\n  add(rhs: TFractionLike): Fraction {\n    rhs = Fraction.asFraction(rhs);\n    return new Fraction(\n      this.numerator * rhs.denominator + rhs.numerator * this.denominator,\n      this.denominator * rhs.denominator,\n    );\n  }\n\n  sub = this.subtract;\n  subtract(rhs: TFractionLike): Fraction {\n    rhs = Fraction.asFraction(rhs);\n    return new Fraction(\n      this.numerator * rhs.denominator - rhs.numerator * this.denominator,\n      this.denominator * rhs.denominator,\n    );\n  }\n\n  mul = this.multiply;\n  multiply(rhs: TFractionLike): Fraction {\n    rhs = Fraction.asFraction(rhs);\n    return new Fraction(\n      this.numerator * rhs.numerator,\n      this.denominator * rhs.denominator,\n    );\n  }\n\n  div = this.divide;\n  divide(rhs: TFractionLike): Fraction {\n    rhs = Fraction.asFraction(rhs);\n    return new Fraction(\n      this.numerator * rhs.denominator,\n      this.denominator * rhs.numerator,\n    );\n  }\n\n  lt = this.lessThan;\n  lessThan(rhs: TFractionLike): boolean {\n    rhs = Fraction.asFraction(rhs);\n    return this.numerator * rhs.denominator < rhs.numerator * this.denominator;\n  }\n\n  lte = this.lessThanOrEqual;\n  lessThanOrEqual(rhs: TFractionLike): boolean {\n    rhs = Fraction.asFraction(rhs);\n    return this.numerator * rhs.denominator <= rhs.numerator * this.denominator;\n  }\n\n  eq = this.equals;\n  equals(rhs: TFractionLike): boolean {\n    rhs = Fraction.asFraction(rhs);\n    return (\n      this.numerator * rhs.denominator === rhs.numerator * this.denominator\n    );\n  }\n\n  gt = this.greaterThan;\n  greaterThan(rhs: TFractionLike): boolean {\n    rhs = Fraction.asFraction(rhs);\n    return this.numerator * rhs.denominator > rhs.numerator * this.denominator;\n  }\n\n  gte = this.greaterThanOrEqual;\n  greaterThanOrEqual(rhs: TFractionLike): boolean {\n    rhs = Fraction.asFraction(rhs);\n    return this.numerator * rhs.denominator >= rhs.numerator * this.denominator;\n  }\n\n  invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator);\n  }\n\n  get quotient(): bigint {\n    return this.numerator / this.denominator;\n  }\n\n  getQuotient(): bigint {\n    return this.numerator / this.denominator;\n  }\n\n  get remainder(): Fraction {\n    return new Fraction(this.numerator % this.denominator, this.denominator);\n  }\n\n  toPrecision(decimals: number): Fraction {\n    return Fraction.parseString(this.toString(decimals));\n  }\n\n  getRemainder(): Fraction {\n    return new Fraction(this.numerator % this.denominator, this.denominator);\n  }\n\n  getRemainderOrNull(): Fraction | null {\n    const remainder = this.getRemainder();\n    return remainder.equals(Fraction.ZERO) ? null : remainder;\n  }\n\n  formatQuotientToLocaleString(locale?: string): string {\n    return Intl.NumberFormat(locale).format(this.getQuotient());\n  }\n\n  remainderToString(decimals = Fraction.MAX_DECIMALS): string {\n    if (decimals <= 0) return \"\";\n    const remainder = this.getRemainder();\n    return remainder.equals(Fraction.ZERO)\n      ? \"\"\n      : remainder\n          .multiply(10n ** BigInt(decimals))\n          .getQuotient()\n          .toString()\n          .replace(/^-/, \"\")\n          .substring(0, decimals)\n          .padStart(decimals, \"0\")\n          .replace(/0*$/, \"\");\n  }\n\n  toNumber(decimals = Fraction.MAX_DECIMALS): number {\n    return Number(this.toString(decimals));\n  }\n\n  toString(decimals = Fraction.MAX_DECIMALS): string {\n    const formattedIntegerPart = this.getQuotient().toString();\n    const formattedFractionalPart = this.remainderToString(decimals);\n    return formattedFractionalPart\n      ? `${formattedIntegerPart}.${formattedFractionalPart}`\n      : formattedIntegerPart;\n  }\n\n  /**\n   * @override\n   * @param _key\n   * @returns\n   */\n  toJSON(_key?: string | number): string {\n    return this.toString();\n  }\n}\n"],"mappings":"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","ignoreList":[]}