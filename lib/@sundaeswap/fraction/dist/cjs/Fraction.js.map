{"version":3,"file":"Fraction.js","names":["FractionError","exports","Fraction","numerator","denominator","_classCallCheck","_defineProperty","subtract","multiply","divide","lessThan","lessThanOrEqual","equals","greaterThan","greaterThanOrEqual","Array","isArray","_numerator","_numerator2","_slicedToArray","BigInt","Error","DivisionByZero","_createClass","key","value","abs","ZERO","add","rhs","asFraction","invert","get","getQuotient","toPrecision","decimals","parseString","toString","getRemainder","getRemainderOrNull","remainder","formatQuotientToLocaleString","locale","Intl","NumberFormat","format","remainderToString","arguments","length","undefined","MAX_DECIMALS","Math","pow","replace","substring","padStart","toNumber","Number","formattedIntegerPart","formattedFractionalPart","concat","toJSON","_key","compare","a","b","fraction","fractionString","match","_fractionString$split","split","map","_fractionString$split2","base","exponent","exponentBig","scale","baseFraction","includes","_fractionString$split3","_fractionString$split4","integerPart","fractionalPart","gcd","divisor","_Fraction"],"sources":["../../src/Fraction.ts"],"sourcesContent":["// eslint-disable-next-line no-use-before-define\nexport type TFractionLike = number | string | bigint | Fraction;\nexport type TIntegerLike = number | string | bigint;\n\nexport enum FractionError {\n  DivisionByZero = \"DivisionByZero\",\n  // InvalidDecimals = \"InvalidDecimals\",\n}\n\n/**\n * Represents a rational number.\n * Provides basic arithmetic operations, and parsing/formatting.\n * TODO localized formatting\n */\nexport class Fraction {\n  static readonly MAX_DECIMALS = 30;\n  static readonly ZERO = new Fraction(0);\n  static readonly ONE = new Fraction(1);\n  static readonly HUNDRED = new Fraction(100);\n  static readonly THOUSAND = new Fraction(1000);\n\n  static compare(a: Fraction, b: Fraction): number {\n    if (a.greaterThan(b)) return 1;\n    if (a.lessThan(b)) return -1;\n    return 0;\n  }\n\n  static asFraction(fraction: TFractionLike): Fraction {\n    return fraction instanceof Fraction\n      ? fraction\n      : Fraction.parseString(fraction.toString());\n  }\n\n  // static fromLocaleString(numStr: string, locale?: string): Fraction {\n  //   const { decimalSeparator, groupSeparator } = getLocaleFormatOptions(locale);\n  //   const [integerPart, fractionalPart] = numStr.split(decimalSeparator);\n  //   const quotient = BigInt(integerPart.split(groupSeparator).join(\"\"));\n  //   if (!fractionalPart?.length) return new Fraction(quotient);\n  //   const denominator = 10n ** BigInt(fractionalPart.length);\n  //   return new Fraction(\n  //     quotient * denominator + BigInt(fractionalPart),\n  //     denominator\n  //   );\n  // }\n\n  static parseString(fractionString: string): Fraction {\n    // Parse a number in various forms (1000, 1.0003, 1.23e4, 1.23e-4) into a numerator and denominator\n    fractionString = fractionString.replace(/,/g, \"\");\n\n    if (fractionString.match(/[eE]/)) {\n      const [base, exponent] = fractionString.split(/[eE]/).map(Number);\n      const exponentBig = BigInt(Math.abs(exponent));\n      const scale = 10n ** exponentBig;\n      const baseFraction = this.parseString(base.toString());\n      return exponent > 0\n        ? baseFraction.multiply(scale)\n        : baseFraction.divide(scale);\n    }\n\n    if (fractionString.includes(\".\")) {\n      const [integerPart, fractionalPart] = fractionString.split(\".\");\n      const numerator = BigInt(integerPart + fractionalPart);\n      const denominator = 10n ** BigInt(fractionalPart.length);\n\n      // Simplify the fraction using the GCD function\n      const gcd = (a, b) => (b === 0n ? a : gcd(b, a % b));\n      const divisor = gcd(numerator, denominator);\n      return new Fraction(numerator / divisor, denominator / divisor);\n    }\n\n    return new Fraction(fractionString);\n  }\n\n  readonly numerator: bigint;\n  readonly denominator: bigint;\n\n  constructor(\n    numerator: TIntegerLike | [bigint, bigint],\n    denominator?: TIntegerLike,\n  ) {\n    if (Array.isArray(numerator)) {\n      [numerator, denominator] = numerator;\n    }\n    this.numerator = BigInt(numerator);\n    this.denominator = BigInt(denominator || 1n);\n    if (this.denominator === 0n) throw new Error(FractionError.DivisionByZero);\n  }\n\n  abs(): Fraction {\n    return this.lessThan(Fraction.ZERO) ? this.multiply(-1) : this;\n  }\n\n  add(rhs: TFractionLike): Fraction {\n    rhs = Fraction.asFraction(rhs);\n    return new Fraction(\n      this.numerator * rhs.denominator + rhs.numerator * this.denominator,\n      this.denominator * rhs.denominator,\n    );\n  }\n\n  sub = this.subtract;\n  subtract(rhs: TFractionLike): Fraction {\n    rhs = Fraction.asFraction(rhs);\n    return new Fraction(\n      this.numerator * rhs.denominator - rhs.numerator * this.denominator,\n      this.denominator * rhs.denominator,\n    );\n  }\n\n  mul = this.multiply;\n  multiply(rhs: TFractionLike): Fraction {\n    rhs = Fraction.asFraction(rhs);\n    return new Fraction(\n      this.numerator * rhs.numerator,\n      this.denominator * rhs.denominator,\n    );\n  }\n\n  div = this.divide;\n  divide(rhs: TFractionLike): Fraction {\n    rhs = Fraction.asFraction(rhs);\n    return new Fraction(\n      this.numerator * rhs.denominator,\n      this.denominator * rhs.numerator,\n    );\n  }\n\n  lt = this.lessThan;\n  lessThan(rhs: TFractionLike): boolean {\n    rhs = Fraction.asFraction(rhs);\n    return this.numerator * rhs.denominator < rhs.numerator * this.denominator;\n  }\n\n  lte = this.lessThanOrEqual;\n  lessThanOrEqual(rhs: TFractionLike): boolean {\n    rhs = Fraction.asFraction(rhs);\n    return this.numerator * rhs.denominator <= rhs.numerator * this.denominator;\n  }\n\n  eq = this.equals;\n  equals(rhs: TFractionLike): boolean {\n    rhs = Fraction.asFraction(rhs);\n    return (\n      this.numerator * rhs.denominator === rhs.numerator * this.denominator\n    );\n  }\n\n  gt = this.greaterThan;\n  greaterThan(rhs: TFractionLike): boolean {\n    rhs = Fraction.asFraction(rhs);\n    return this.numerator * rhs.denominator > rhs.numerator * this.denominator;\n  }\n\n  gte = this.greaterThanOrEqual;\n  greaterThanOrEqual(rhs: TFractionLike): boolean {\n    rhs = Fraction.asFraction(rhs);\n    return this.numerator * rhs.denominator >= rhs.numerator * this.denominator;\n  }\n\n  invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator);\n  }\n\n  get quotient(): bigint {\n    return this.numerator / this.denominator;\n  }\n\n  getQuotient(): bigint {\n    return this.numerator / this.denominator;\n  }\n\n  get remainder(): Fraction {\n    return new Fraction(this.numerator % this.denominator, this.denominator);\n  }\n\n  toPrecision(decimals: number): Fraction {\n    return Fraction.parseString(this.toString(decimals));\n  }\n\n  getRemainder(): Fraction {\n    return new Fraction(this.numerator % this.denominator, this.denominator);\n  }\n\n  getRemainderOrNull(): Fraction | null {\n    const remainder = this.getRemainder();\n    return remainder.equals(Fraction.ZERO) ? null : remainder;\n  }\n\n  formatQuotientToLocaleString(locale?: string): string {\n    return Intl.NumberFormat(locale).format(this.getQuotient());\n  }\n\n  remainderToString(decimals = Fraction.MAX_DECIMALS): string {\n    if (decimals <= 0) return \"\";\n    const remainder = this.getRemainder();\n    return remainder.equals(Fraction.ZERO)\n      ? \"\"\n      : remainder\n          .multiply(10n ** BigInt(decimals))\n          .getQuotient()\n          .toString()\n          .replace(/^-/, \"\")\n          .substring(0, decimals)\n          .padStart(decimals, \"0\")\n          .replace(/0*$/, \"\");\n  }\n\n  toNumber(decimals = Fraction.MAX_DECIMALS): number {\n    return Number(this.toString(decimals));\n  }\n\n  toString(decimals = Fraction.MAX_DECIMALS): string {\n    const formattedIntegerPart = this.getQuotient().toString();\n    const formattedFractionalPart = this.remainderToString(decimals);\n    return formattedFractionalPart\n      ? `${formattedIntegerPart}.${formattedFractionalPart}`\n      : formattedIntegerPart;\n  }\n\n  /**\n   * @override\n   * @param _key\n   * @returns\n   */\n  toJSON(_key?: string | number): string {\n    return this.toString();\n  }\n}\n"],"mappings":"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","ignoreList":[]}